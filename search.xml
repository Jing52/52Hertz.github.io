<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study29/"/>
      <url>/2020/03/02/study29/</url>
      
        <content type="html"><![CDATA[<p>title: 如何保持Redis和db的数据一致性<br>date: 2020-02-20 19:54:30<br>tags: </p><ul><li>Java<br>categories: Redis</li></ul><h3 id="导致数据不一致性的场景："><a href="#导致数据不一致性的场景：" class="headerlink" title="导致数据不一致性的场景："></a>导致数据不一致性的场景：</h3><h4 id="场景一（查询）："><a href="#场景一（查询）：" class="headerlink" title="场景一（查询）："></a>场景一（查询）：</h4><a id="more"></a><blockquote><p>高并发的时候，线程A  redis未命中，去查询db，得到值1，还未回种redis，这时候db修改了，线程B  redis未命中，查询db，得到值2，但线程B先存入redis，然后线程A存入redis，这时候redis的数据是值1，是条脏数据。</p></blockquote><p><code>解决方案：</code></p><blockquote><p>通过加锁解决，保证查询db和存入redis操作的原子性，或者用乐观锁，加个版本号或者时间戳，存入redis之前查下，但还是要保证查和存的原子性</p></blockquote><h4 id="场景二（更新）"><a href="#场景二（更新）" class="headerlink" title="场景二（更新）:"></a>场景二（更新）:</h4><blockquote><p>先写入db，在删除缓存，可能出现db已经更新，但redis中未更新的情况，这时候redis命中后查到的数据就是旧数据，所以不行。</p></blockquote><h4 id="场景三（更新）："><a href="#场景三（更新）：" class="headerlink" title="场景三（更新）："></a>场景三（更新）：</h4><blockquote><p>先删除缓存，再写入db。这其实也有并发问题：线程A是更新操作，先删除缓存，但还没写入db，这时候线程B来了，是个查询操作，发现缓存中没有数据，就去查db，但这时候线程A的写入操作还没完成，于是线程B查到了脏数据。</p></blockquote><p><code>解决方案：</code></p><p>老外提出了一个缓存更新套路，名为Cache-Aside pattern。其中就指出</p><blockquote><p>失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。<br>命中：应用程序从cache中取数据，取到后返回。<br>更新：先把数据存到数据库中，成功后，再让缓存失效。</p></blockquote><p>这样的策略其实还是会出现并发问题：<br>假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p><blockquote><p>（1）缓存刚好失效<br>（2）请求A查询数据库，得一个旧值<br>（3）请求B将新值写入数据库<br>（4）请求B删除缓存<br>（5）请求A将查到的旧值写入缓存</p></blockquote><p>此时，产生脏数据的原因：</p><blockquote><p>请求B的写操作（3）要比请求A（2）的读操作耗时更短，才会出现（4）先于（5）<br>但是出现该情况的可能性是有多大呢，这边以读写分离为例，为啥会出现读写分离，读写分离的意义就是因为读操作比较快，耗资源少，不然要读写分离干啥？所以出现该场景的可能性太小了。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>redis和db的数据一致性理论上是不可能，如果真的对数据有强一致性的要求，就不应该放缓存里！！</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study28/"/>
      <url>/2020/03/02/study28/</url>
      
        <content type="html"><![CDATA[<p>title: 缓存笔记<br>date: 2020-02-10 19:34:30<br>tags: </p><ul><li>Java<br>categories: Redis</li></ul><h1 id="redis优点"><a href="#redis优点" class="headerlink" title="redis优点"></a>redis优点</h1><p>数据库的数据是存放在瓷盘中的，虽然数据库层也做了对应的缓存，但是只针对查询的内容，一般只有表中的数据不发生变动的情况下，数据库对应的cache才会起作用，但这并不能减少业务系统对数据库的操作的IO压力</p><a id="more"></a><p>热点数据的高速缓存</p><p>提高应用的响应速度</p><p>极大缓解后端数据库的压力</p><h2 id="Memcache和Redis的区别"><a href="#Memcache和Redis的区别" class="headerlink" title="Memcache和Redis的区别"></a>Memcache和Redis的区别</h2><h4 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h4><blockquote><p>代码层次类似于Hash</p></blockquote><ul><li>支持简单数据类型</li><li>不支持数据持久化存储</li><li>不支持主从</li><li>不支持分片</li></ul><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ul><li>数据类型丰富</li><li>支持数据磁盘持久化存储</li><li>支持主从</li><li>支持分片</li></ul><h1 id="为什么Redis这么快"><a href="#为什么Redis这么快" class="headerlink" title="为什么Redis这么快"></a>为什么Redis这么快</h1><p>100000+QPS</p><ul><li>完全基于内存的</li><li>数据结构简单，对数据的操作也简单</li><li>采用单线程，单线程也能处理高并发请求，多核可启动多实例</li><li>使用多路I/O复用模型，即非阻塞IO</li></ul><h3 id="传统的阻塞I-O模型"><a href="#传统的阻塞I-O模型" class="headerlink" title="传统的阻塞I/O模型"></a>传统的阻塞I/O模型</h3><p>当使用read或者write对某一个文件fd文件进行读写时，如果当前fd不可读或者不可写，整个Redis服务就不会对其他的操作做出响应，导致整个服务不可用。往往多个客户端进行访问的时候就不可行</p><h1 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h1><p>String：最基本的数据类型，二进制安全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set name &quot;redis&quot;</span><br><span class="line">get name    #&quot;redis&quot;</span><br><span class="line">set count 1</span><br><span class="line">incr count</span><br><span class="line">get count   #&quot;2&quot;</span><br><span class="line">## 例如记载访问数量，每用户访问就incr</span><br></pre></td></tr></table></figure><p>Hash:String元素组成的字典，适合用于存储对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hmset info name &quot;Evan&quot; age 25 sex &quot;男&quot;</span><br><span class="line">hget info age #&quot;25&quot;</span><br><span class="line">hset info age 26</span><br><span class="line">hget info age #&quot;26&quot;</span><br></pre></td></tr></table></figure><p>List:列表，按照String元素插入顺序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lpush list a</span><br><span class="line">lpush list b</span><br><span class="line">lpush list c</span><br><span class="line">lrange list 0 10</span><br><span class="line"># 例子，最新消息排行榜，最新插入的消息，优先展示</span><br></pre></td></tr></table></figure><p>Set: String元素组成的无序集合，通过哈希表实现，不允许重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sadd myset 111 # 1</span><br><span class="line">sadd myset 222 # 1</span><br><span class="line">sadd myset 333 # 1</span><br><span class="line">sadd myset 111 # 0</span><br><span class="line">smembers myset</span><br><span class="line">## 共同关注，喜好等功能</span><br></pre></td></tr></table></figure><p>Sorted Set:通过分数来为集合中的成员进行从小到大的排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zadd myzset 1 a # 1</span><br><span class="line">zadd myzset 3 b # 1</span><br><span class="line">zadd myzset 2 c # 1</span><br><span class="line">zadd myzset 3 d # 1</span><br><span class="line">zrangebyscore myzset 0 10</span><br><span class="line"># 从小打到排序</span><br></pre></td></tr></table></figure><p>用于计数的HyperLogLog，用于支持存储地理位置信息的Geo</p><h3 id="从海量Key里查询出某一固定前缀的Key"><a href="#从海量Key里查询出某一固定前缀的Key" class="headerlink" title="从海量Key里查询出某一固定前缀的Key"></a>从海量Key里查询出某一固定前缀的Key</h3><ul><li>摸清数据规模，即问清楚边界</li></ul><ol><li>KEYS pattern：查找所有符合给定模式pattern的key</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys k1* #查询出所有k1打头的数据</span><br></pre></td></tr></table></figure><blockquote><p>KEYS指令一次性返回所有匹配的key</p><p>键的数量过大会使服务卡顿</p></blockquote><ol start="2"><li><p>SCAN cursor [MATCH pattern] [COUNT count]</p><p>无阻塞的提取出指定模式的KEY列表，SCAN执行只会返回少量元素，可用于生产环境</p><blockquote><ul><li>基于游标的迭代器，需要基于上一次的游标延续之前的迭代过程</li><li>以0作为游标开始一次新的迭代，直到命令返回游标0完成一次遍历</li><li>不保证每次执行都返回某个给定数量的元素，支持模糊查询</li><li>一次返回的数量不可控，只能是大概率符合count参数li></ul></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SCAN 0 MATCH k1* COUNT 10</span><br><span class="line"># 从0开始，匹配10条k1打头的key</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-de46fdffc72eade7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>返回：一个是游标值，另一个是数据集合</p><h1 id="如何通过Redis实现分布式锁"><a href="#如何通过Redis实现分布式锁" class="headerlink" title="如何通过Redis实现分布式锁"></a>如何通过Redis实现分布式锁</h1><h4 id="分布式锁需要解决的问题"><a href="#分布式锁需要解决的问题" class="headerlink" title="分布式锁需要解决的问题"></a>分布式锁需要解决的问题</h4><ul><li><p>互斥性 任意时刻只能一个客户端获取锁</p></li><li><p>安全性 锁只能被持有的客户端删除，不能被其他客户端删除</p></li><li><p>死锁 获取锁的客户端因为某些原因导致宕机，而未能释放锁</p></li><li>容错 当部分节点，如Redis节点宕机的时候，客户端仍然能够获取释放锁</li></ul><ol><li>SETNX key value：如果不存在，则创建并赋值</li></ol><p>时间复杂度：O(1)</p><p>返回值：设置成功，返回1；设置失败，返回0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SETNX locknx test #1</span><br><span class="line">SETNX locknx task #0</span><br><span class="line">get locknx #test</span><br></pre></td></tr></table></figure><ol start="2"><li>EXPIRE key seconds:解决SETNX长期有效问题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPIRE locknx 2</span><br><span class="line">SETNX locknx task #1</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-55952b3d29082325.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>setnx命令和expire命令本身是原子性，但是如果代码当中放在一起就不能保证原子性了</p><ol start="3"><li>SET key value [EX second] [PX millisecond] [NX|XX]</li></ol><p>EX second:设置键的过期时间为second秒</p><p>PX millisecond：设置键的过期时间为millisecond毫秒</p><p>NX：只有键不存在的时候，才对键进行设置操作</p><p>XX:   只在键已经存在时，才对键进行设置操作</p><p>SET操作成功后返回OK，失败返回nil</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set locktarget 12345 ex 10 nx</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-b8c48d1dd41cdfc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="大量key同时过期"><a href="#大量key同时过期" class="headerlink" title="大量key同时过期"></a>大量key同时过期</h4><p>集中过期，由于清除大量key很耗时，会出现卡顿现象</p><p>解决方案：在设置key的过期时间的时候，给每个key加上随机值</p><h1 id="如何使用Redis做异步队列"><a href="#如何使用Redis做异步队列" class="headerlink" title="如何使用Redis做异步队列"></a>如何使用Redis做异步队列</h1><ol><li>使用List作为队列，RPUSH生产消息，LPOP消费消息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpush testlist aaa</span><br><span class="line">rpush testlist bbb</span><br><span class="line">rpush testlist ccc</span><br><span class="line">lpop testlist</span><br></pre></td></tr></table></figure><p>缺点：没有等待队列里有值就直接消费</p><p>弥补：可以通过应用层引入sleep机制去调用LPOP重试</p><ol start="2"><li>BLPOP key[key] timeout:阻塞直到队列有消息或者超时</li></ol><p>客户端1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blpop testlist 20</span><br></pre></td></tr></table></figure><p>客户端2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpush testlist aaa</span><br></pre></td></tr></table></figure><p>此时客户端1就会获取消息aaa</p><ul><li>缺点：只能提供一个消费者消费</li></ul><h4 id="pub-sub主题订阅者模式"><a href="#pub-sub主题订阅者模式" class="headerlink" title="pub/sub主题订阅者模式"></a>pub/sub主题订阅者模式</h4><ul><li>发送者（pub）发送消息，订阅者（sub)接收消息</li><li>订阅者可以订阅任意数量的频道</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14481291-6614b7ba33aae216.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>客户端1订阅频道myTopic</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe myTopic</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-af2224e1b42f864c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>客户端2订阅频道myTopic</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-d52afd337c499c01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>客户端3订阅另一个频道anotherTopic</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-96445c1f0ad521ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>客户端4发布消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publish myTopic &quot;hello&quot; #客户端1，2收到消息，客户端3未收到消息</span><br></pre></td></tr></table></figure><p>pub/sub缺点：消息的发布是无状态的，无法保证可达</p><h1 id="Redis做持久化"><a href="#Redis做持久化" class="headerlink" title="Redis做持久化"></a>Redis做持久化</h1><h3 id="RDB（快照）持久化：保存某个时间点的全量数据快照"><a href="#RDB（快照）持久化：保存某个时间点的全量数据快照" class="headerlink" title="RDB（快照）持久化：保存某个时间点的全量数据快照"></a>RDB（快照）持久化：保存某个时间点的全量数据快照</h3><p>[图片上传失败…(image-be6a56-1583057254875)]</p><p>900秒内，如果有1条是写入指令，就触发产生一次快照</p><p>300秒内，如果有10条是写入指令，就触发产生一次快照</p><p>60秒内，如果有10000条是写入指令，就触发产生一次快照</p><p><code>stop-writes-on-bgsave-error</code></p><p>yes代表当备份进程出错的时候，主进程就会禁止写入操作，保证持久化数据的一致性</p><p><code>rdbcompression</code></p><p>yes代表在备份的时候需要将RDB文件进行压缩后才去做保存，建议no，因为Redis本身就属于CPU密集型服务器，在开启压缩的时候会带来更多的CPU消耗，相比硬盘成本，CPU更值钱，如果你需要禁用RDB配置，只需要在save后加上<code>save &quot;&quot;</code></p><h4 id="自动化触发RDB持久化的方式"><a href="#自动化触发RDB持久化的方式" class="headerlink" title="自动化触发RDB持久化的方式"></a>自动化触发RDB持久化的方式</h4><ul><li>根据redis.conf配置里的<code>SAVE m n</code>定时触发（用的是BGSAVE）</li><li>主从复制时，主节点自动触发</li><li>执行Debug Reload</li><li>执行Shutdown且没有开启AOF持久化</li></ul><h4 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h4><ul><li>内存数据的全量同步，数据量大会由于I/O而严重影响性能</li><li>可能会因为Redis挂掉而丢失从当前至最近一次快照期间的数据</li></ul><h3 id="AOF持久化：保持写状态"><a href="#AOF持久化：保持写状态" class="headerlink" title="AOF持久化：保持写状态"></a>AOF持久化：保持写状态</h3><ul><li>记录下除了查询以外的所有变更数据库状态的指令</li><li>以append的形势追加保存到AOF文件中（增量）</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14481291-ddfa320509ce547a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>日志重写解决AOF文件大小不断增大的问题，原理如下：</p><ul><li>调用fork()，创建一个子进程</li><li>子进程把新的AOF写到一个临时文件里，不依赖原来的AOF文件</li><li>主进程持续将新的变动同时写到内存和原来的AOF里</li><li>主进程获取子进程重写AOF的完成信号，往新AOF同步增量变动</li><li>使用新的AOF文件替代掉旧的AOF文件</li></ul><h4 id="Redis数据的恢复"><a href="#Redis数据的恢复" class="headerlink" title="Redis数据的恢复"></a>Redis数据的恢复</h4><p><img src="https://upload-images.jianshu.io/upload_images/14481291-84fff9796d624380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="RDB和AOF的优缺点"><a href="#RDB和AOF的优缺点" class="headerlink" title="RDB和AOF的优缺点"></a>RDB和AOF的优缺点</h5><p>RDB优点：全量数据快照，文件小，恢复快</p><p>RDB缺点：无法保存最近一次快照之后的数据</p><p>AOF优点：可读性高，适合保存增量数据，数据不易丢失</p><p>AOF缺点：文件体积大，恢复时间长</p><p>Redis4.0后，RDB-AOF混合持久化方式，作为默认</p><ul><li>BGSAVE做镜像全量持久化，AOF做增量持久化</li></ul><h1 id="Pipeline及主从同步"><a href="#Pipeline及主从同步" class="headerlink" title="Pipeline及主从同步"></a>Pipeline及主从同步</h1><ul><li>Pipeline和Linux的管道类似</li><li>Redis基于请求/响应模型，单个请求处理需要一一作答</li><li>Pipeline批量执行指令，节省多次IO往返的时间</li><li>有顺序依赖的指令建议分批发送</li></ul><h4 id="Redis的同步机制"><a href="#Redis的同步机制" class="headerlink" title="Redis的同步机制"></a>Redis的同步机制</h4><p>主从同步原理</p><ol><li>全同步过程</li></ol><ul><li>Salve发送sync命令到Master</li><li>Master启动一个后台进程，将Redis中的数据快照保存到文件中</li><li>Master将保存数据快照期间接收到的写命令缓存起来</li><li>Master完成写文件操作后，将该文件发送方给Salve</li><li>使用新的AOF文件替代掉旧的AOF文件</li><li>Master将这期间收集的增量写命令发送给Salve</li></ul><ol start="2"><li>增量同步过程</li></ol><ul><li>Master接收到用户的操作指令，判断是否需要传播到Salve</li><li>将操作记录追加到AOF文件</li><li>将操作传播到其他Salve：1、对齐主从库；2、往响应缓存写入指令</li><li>将缓存中的数据发送给Salve</li></ul><h4 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h4><p>解决主从同步Master宕机后的主从切换问题</p><ul><li>监控：检查主从服务器是否运行正常</li><li>提醒：通过API向管理员或者其他应用程序发送故障通知</li><li>自动故障迁移：主从切换</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study27/"/>
      <url>/2020/03/02/study27/</url>
      
        <content type="html"><![CDATA[<p>title: Spring Boot的自动装配<br>date: 2020-01-15 19:44:30<br>tags: </p><ul><li>Java<br>categories: Spring Boot</li></ul><h4 id="Spring-Boot的自动装配的结构图："><a href="#Spring-Boot的自动装配的结构图：" class="headerlink" title="Spring Boot的自动装配的结构图："></a>Spring Boot的自动装配的结构图：</h4><a id="more"></a><blockquote><p> <img src="https://upload-images.jianshu.io/upload_images/14481291-0df251a4bdf46d01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构图"></p><h4 id="入口点-SpringBoot的引导类有如下内容"><a href="#入口点-SpringBoot的引导类有如下内容" class="headerlink" title="入口点:SpringBoot的引导类有如下内容:"></a>入口点:SpringBoot的引导类有如下内容:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; @SpringBootApplication</span><br><span class="line">&gt; public class TestApplication &#123;</span><br><span class="line">&gt; 　　　　public static void main(String[] args) &#123;</span><br><span class="line">&gt; 　　　　　　SpringApplication.run(TestApplication.class,args);</span><br><span class="line">&gt; 　　　&#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h4 id="SpringBootApplication注解"><a href="#SpringBootApplication注解" class="headerlink" title="@SpringBootApplication注解:"></a>@SpringBootApplication注解:</h4><blockquote><p>@SpringBootApplication是一个组合注解，主要是以下三个注解:<br>@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan</p></blockquote><p>查看源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; @Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">&gt; @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">&gt; @Documented</span><br><span class="line">&gt; @Inherited</span><br><span class="line">&gt; @SpringBootConfiguration</span><br><span class="line">&gt; @EnableAutoConfiguration</span><br><span class="line">&gt; @ComponentScan(</span><br><span class="line">&gt;     excludeFilters = &#123;@Filter(</span><br><span class="line">&gt;     type = FilterType.CUSTOM,</span><br><span class="line">&gt;     classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">&gt; ), @Filter(</span><br><span class="line">&gt;     type = FilterType.CUSTOM,</span><br><span class="line">&gt;     classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">&gt; )&#125;</span><br><span class="line">&gt; )</span><br><span class="line">&gt; public @interface SpringBootApplication &#123;</span><br><span class="line">&gt; ...</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><h4 id="SpringBootConfiguration注解"><a href="#SpringBootConfiguration注解" class="headerlink" title="@SpringBootConfiguration注解:"></a>@SpringBootConfiguration注解:</h4><p>查看源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; @Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">&gt; @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">&gt; @Documented</span><br><span class="line">&gt; @Configuration</span><br><span class="line">&gt; public @interface SpringBootConfiguration &#123;</span><br><span class="line">&gt;     @AliasFor(</span><br><span class="line">&gt;         annotation = Configuration.class</span><br><span class="line">&gt;     )</span><br><span class="line">&gt;     boolean proxyBeanMethods() default true;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><blockquote><p>看源码发现有一个@Configuration注解，这个注解是用来标识某一个类为Spring的<br>一个配置类，@SpringBootConfiguration注解和@Configuration注解的作用是一样的，但是Spring Boot更推荐@SpringBootConfiguration注解。</p></blockquote><h4 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title="@EnableAutoConfiguration注解:"></a>@EnableAutoConfiguration注解:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; @Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">&gt; @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">&gt; @Documented</span><br><span class="line">&gt; @Inherited</span><br><span class="line">&gt; @AutoConfigurationPackage</span><br><span class="line">&gt; @Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line">&gt; public @interface EnableAutoConfiguration &#123;</span><br><span class="line">&gt;     String ENABLED_OVERRIDE_PROPERTY = &quot;spring.boot.enableautoconfiguration&quot;;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     String[] excludeName() default &#123;&#125;;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>@EnableAutoConfifiguration注解也是组合注解，主要包含@AutoConfigurationPackage和<br>@Import。</p></blockquote><h5 id="AutoConfigurationPackage注解："><a href="#AutoConfigurationPackage注解：" class="headerlink" title="@AutoConfigurationPackage注解："></a>@AutoConfigurationPackage注解：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; @Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">&gt; @Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">&gt; @Documented</span><br><span class="line">&gt; @Inherited</span><br><span class="line">&gt; @Import(&#123;Registrar.class&#125;)</span><br><span class="line">&gt; public @interface AutoConfigurationPackage &#123;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>该注解通过@Import引入了一个Registrar.class类，Registrar类主要是加载@SpringBootApplication注解所<br>在类的包结构，并进行存储，为后期Spring Boot加载资源提供一个扫描的包路径。</p></blockquote><h5 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)"></a>@Import(AutoConfigurationImportSelector.class)</h5><blockquote><p>上述@Import注解引入了一个类AutoConfigurationImportSelector.class,读取该类的源代码会发现，SpringBoot启动所在的装配类都在该注解类所在项目的META-INF/spring.factories文件中读取</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-55bddc3ebc20bc3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作。以前我们需要自己配置的东西，自动配置类都帮我们完成了。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-8fa1229c2e994f78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/14481291-cf2c572ee851ff51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study26/"/>
      <url>/2020/03/02/study26/</url>
      
        <content type="html"><![CDATA[<p>title: CMS垃圾收集器<br>date: 2019-12-29 18:58:30<br>tags: </p><ul><li>Java<br>categories: JVM</li></ul><blockquote><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾 回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。</p><p>最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。</p></blockquote><a id="more"></a><p>CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段:</p><ul><li>初始标记<blockquote><p>只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。</p></blockquote></li><li>并发标记<blockquote><p>进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程。</p></blockquote></li><li>重新标记<blockquote><p> 为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记 记录，仍然需要暂停所有的工作线程。</p></blockquote></li><li>并发清除</li></ul><blockquote><p>清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并 发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看 CMS 收集器的内存回收和用户线程是一起并发地执行。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study25/"/>
      <url>/2020/03/02/study25/</url>
      
        <content type="html"><![CDATA[<p>title: 数据库的事务隔离级别<br>date: 2019-12-15 19:55:30<br>tags: </p><ul><li>Java<br>categories: 数据库</li></ul><h4 id="事物的特性-ACID"><a href="#事物的特性-ACID" class="headerlink" title="事物的特性-ACID"></a>事物的特性-ACID</h4><ol><li>A-原子性（Atomicity）</li></ol><blockquote><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p></blockquote><a id="more"></a><ol start="2"><li>C-一致性（Consistency）<blockquote><p>事务前后数据的完整性必须保持一致。</p></blockquote></li><li>I-隔离性（Isolation）<blockquote><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p></blockquote></li><li>D-持久性（Durability）<blockquote><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</p></blockquote><h4 id="事物的隔离性"><a href="#事物的隔离性" class="headerlink" title="事物的隔离性"></a>事物的隔离性</h4>概念已述<h5 id="没有事物隔离会产生的情况"><a href="#没有事物隔离会产生的情况" class="headerlink" title="没有事物隔离会产生的情况"></a>没有事物隔离会产生的情况</h5></li><li><p>场景一（脏读）</p><blockquote><p>事务A访问了数据库，往数据库里添加新人的名字，但是没有提交事务。</p><p>insert into User values (4, ‘张三’);</p><p>这时，来了另一个事务B，他要查询所有人的名字。</p><p>select Name from User;</p><p>这时，如果没有事务之间没有有效隔离，那么事务B返回的结果中就会出现“张三”的名字。这就是“脏读（dirty read）”。</p></blockquote></li><li><p>场景二（不可重复读）</p><blockquote><p>事务A访问了数据库，查看ID是1的人的名字</p><p>select Name from User where ID = 1;</p><p>这时，来了另一个事务B，更新ID是1的人的名字然后提交了事务。</p><p>update User set Name = ‘李四’ where ID = 1;</p><p>接着，事务A还想再看看ID是1的人的名字，于是又执行了</p><p>select Name from User where ID = 1;</p><p>此时发现两次读取的数据不一致，这就是不可重复读（unrepeatable read）。</p></blockquote></li><li><p>场景三（幻读）</p><blockquote><p>事务A访问了数据库，查看数据库的所有人，于是执行了</p><p>select * from User;</p><p>这时候，事务B来了，往数据库添加新人。</p><p>insert into User values(4, ‘王五’);</p><p>这时候，事务A重新查看所有的人，于是又执行了。</p><p>select * from User;</p><p>事物A就很蒙，发现两次读取的人数不一样，这种情况就叫“幻读（phantom problem）”。</p></blockquote></li></ol><h4 id="事物的隔离级别"><a href="#事物的隔离级别" class="headerlink" title="事物的隔离级别"></a>事物的隔离级别</h4><p>所以为了防止出现脏读，不可重复读，幻读的情况，我们需要根据情形为数据库设立不同的隔离级别。</p><h5 id="读未提交（Read-Uncommitted）"><a href="#读未提交（Read-Uncommitted）" class="headerlink" title="读未提交（Read Uncommitted）"></a>读未提交（Read Uncommitted）</h5><blockquote><p>读未提交，顾名思义，就是可以读到未提交的内容。</p><p>因此，在这种隔离级别下，查询是不会加锁的，也由于查询的不加锁，所以这种隔离级别的一致性是最差<br>的，可能会产生“脏读”、“不可重复读”、“幻读”。</p><p>如无特殊情况，基本是不会使用这种隔离级别的。</p></blockquote><h5 id="读提交（Read-Committed）"><a href="#读提交（Read-Committed）" class="headerlink" title="读提交（Read Committed）"></a>读提交（Read Committed）</h5><blockquote><p>读提交，顾名思义，就是只能读到已经提交了的内容。</p><p>这是各种系统中最常用的一种隔离级别，也是SQL Server和Oracle的默认隔离级别。这种隔离级别能够有效的避免脏读，但除非在查询中显示的加锁，如：</p><p>select * from T where ID=2 lock in share mode;</p><p>select * from T where ID=2 for update;</p><p>不然，普通的查询是不会加锁的。</p><p>那为什么“读提交”同“读未提交”一样，都没有查询加锁，但是却能够避免脏读呢？</p><p>这就要说道另一个机制“快照（snapshot）”，而这种既能保证一致性又不加锁的读也被称为“快照读（Snapshot Read）”</p><p>假设没有“快照读”，那么当一个更新的事务没有提交时，另一个对更新数据进行查询的事务会因为无法查询而被阻塞，这种情况下，并发能力就相当的差。</p><p>而“快照读”就可以完成高并发的查询，不过，“读提交”只能避免“脏读”，并不能避免“不可重复读”和“幻读”。</p></blockquote><h5 id="可重复读-Repeated-Read"><a href="#可重复读-Repeated-Read" class="headerlink" title="可重复读(Repeated Read)"></a>可重复读(Repeated Read)</h5><blockquote><p>可重复读，顾名思义，就是专门针对“不可重复读”这种情况而制定的隔离级别，自然，它就可以有效的避免“不可重复读”。而它也是MySql的默认隔离级别。</p><p>在这个级别下，普通的查询同样是使用的“快照读”，但是，和“读提交”不同的是，当事务启动时，就不允许 进行“修改操作（Update）”了，而“不可重复读”恰恰是因为两次读取之间进行了数据的修改，因此，“可重复读”能够有效的避免“不可重复读”，但却避免不了“幻读”，因为幻读是由于“插入或者删除操作（Insert or Delete）”而产生的。</p></blockquote><h5 id="串行化（Serializable）"><a href="#串行化（Serializable）" class="headerlink" title="串行化（Serializable）"></a>串行化（Serializable）</h5><blockquote><p>这是数据库最高的隔离级别，这种级别下，事务“串行化顺序执行”，也就是一个一个排队执行。</p><p>这种级别下，“脏读”、“不可重复读”、“幻读”都可以被避免，但是执行效率奇差，性能开销也最大，所以基本没人会用。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study24/"/>
      <url>/2020/03/02/study24/</url>
      
        <content type="html"><![CDATA[<p>title: 设计模式-观察者模式<br>date: 2019-11-25 23:45:30<br>tags: </p><ul><li>Java<br>categories: 设计模式</li></ul><h4 id="观察者模式-概念摘自菜鸟教程"><a href="#观察者模式-概念摘自菜鸟教程" class="headerlink" title="观察者模式(概念摘自菜鸟教程)"></a>观察者模式(概念摘自菜鸟教程)</h4><blockquote><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p></blockquote><a id="more"></a><blockquote><p>优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。<br>缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。<br>使用场景：<br>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>一个对象必须通知其他对象，而并不知道这些对象是谁。<br>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。<br>我这边以天气站为被依赖的对象Subject</p></blockquote><p><code>Subject</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.observer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: Evan</span><br><span class="line"> * @CreateTime: 2020-02-23</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">public interface Subject &#123;</span><br><span class="line">    //登记观察者</span><br><span class="line">    public void registerObserver(ObserverOne observer);</span><br><span class="line">    </span><br><span class="line">    //移除观察者</span><br><span class="line">    public void removeObserver(ObserverOne observer);</span><br><span class="line"></span><br><span class="line">    //唤醒观察者</span><br><span class="line">    public void notifyObserver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Weater</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.observer;</span><br><span class="line"></span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: Evan</span><br><span class="line"> * @CreateTime: 2020-02-23</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">public class Weater implements Subject &#123;</span><br><span class="line"></span><br><span class="line">    private static float temperature;//温度</span><br><span class="line"></span><br><span class="line">    private static float pressure;//气压</span><br><span class="line"></span><br><span class="line">    private static float humidity;//湿度</span><br><span class="line"></span><br><span class="line">    private ArrayList&lt;ObserverOne&gt; observers;</span><br><span class="line"></span><br><span class="line">    public Weater()&#123;</span><br><span class="line">        observers = new ArrayList&lt;ObserverOne&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setData(float temperature, float pressure, float humidity)&#123;</span><br><span class="line">        this.temperature = temperature;</span><br><span class="line">        this.pressure = pressure;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        dataChange();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void dataChange() &#123;</span><br><span class="line">        notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void registerObserver(ObserverOne observer) &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void removeObserver(ObserverOne observer) &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void notifyObserver() &#123;</span><br><span class="line">        for (ObserverOne observerOne : observers) &#123;</span><br><span class="line">            observerOne.update(this.temperature,this.pressure,this.humidity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ObserverOne</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.observer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: Evan</span><br><span class="line"> * @CreateTime: 2020-02-23</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">public interface ObserverOne &#123;</span><br><span class="line">    public void update(float temperature,float pressure,float humidity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Baidu</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.observer;</span><br><span class="line"></span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: Evan</span><br><span class="line"> * @CreateTime: 2020-02-23</span><br><span class="line"> * @Description: 创建实体观察者类。</span><br><span class="line"> */</span><br><span class="line">public class Baidu implements ObserverOne &#123;</span><br><span class="line">    private static float temperature;</span><br><span class="line"></span><br><span class="line">    private static float pressure;</span><br><span class="line"></span><br><span class="line">    private static float humidity;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(float temperature, float pressure, float humidity) &#123;</span><br><span class="line">        this.temperature = temperature;</span><br><span class="line">        this.pressure = pressure;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        System.out.println(&quot;1:&quot;+temperature+&quot;2:&quot;+pressure+&quot;3:&quot;+humidity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Client</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.observer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author: Evan</span><br><span class="line"> * @CreateTime: 2020-02-23</span><br><span class="line"> * @Description: 使用 Subject 和实体观察者对象。</span><br><span class="line"> */</span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Weater weater = new Weater();</span><br><span class="line"></span><br><span class="line">        Baidu baidu = new Baidu();</span><br><span class="line">        weater.registerObserver(baidu);</span><br><span class="line"></span><br><span class="line">        weater.setData(30f,300f,3000f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-795a2ff177469d47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study23/"/>
      <url>/2020/03/02/study23/</url>
      
        <content type="html"><![CDATA[<p>title: Redis笔记———自用<br>date: 2019-11-15 12:12:30<br>tags: </p><ul><li>Java<br>categories: Redis</li></ul><p>Redis笔记</p><a id="more"></a><blockquote><blockquote><p><code>redis.conf</code><br>bind :修改成0.0.0.0，任何网络都可以访问<br>requirepass :修改密码<br>daemonize  :允许后台运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; redis-server ./redis.conf  #启动服务</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./install-server.sh  #生成系统服务，`/redis/utils`目录下</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-9e378a02df4488bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; chkconfig --list|grep redis # 查看一下服务列表</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-e55b3020a392ba8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; service redis_6379 start/stop #启动/关闭服务</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; redis-cli  #进入命令行</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; shutdown save  #停止redis</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auth 密码  #登陆redis</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; exit  #退出</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study22/"/>
      <url>/2020/03/02/study22/</url>
      
        <content type="html"><![CDATA[<p>title: 安装Redis时make报错<br>date: 2019-11-10 21:38:30<br>tags: </p><ul><li>Java<br>categories: Redis</li></ul><p>报错如下图：</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/14481291-43bd6d0de7b776b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>提示cc:未找到命令；gcc：命令未找到。<br>原因是虚拟机系统中缺少gcc，安装gcc即可</p></blockquote><h2 id="安装GCC"><a href="#安装GCC" class="headerlink" title="安装GCC"></a>安装GCC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-cl6nwmjm redis]# yum -y install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure><p>再次<code>make</code><br><img src="https://upload-images.jianshu.io/upload_images/14481291-546fc2a881ebf45c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>致命错误：jemalloc/jemalloc.h：没有那个文件或目录</p><p>执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; make MALLOC=libc</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study21/"/>
      <url>/2020/03/02/study21/</url>
      
        <content type="html"><![CDATA[<p>title: Jmeter压测<br>date: 2019-11-03 00:18:30<br>tags: </p><ul><li>Java<br>categories:  Jmeter</li></ul><h5 id="压测界面"><a href="#压测界面" class="headerlink" title="压测界面"></a>压测界面</h5><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/14481291-2ce79c7a7741a070.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="创建线程组"><a href="#创建线程组" class="headerlink" title="创建线程组"></a>创建<code>线程组</code></h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-907927099109355e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="线程组界面"><a href="#线程组界面" class="headerlink" title="线程组界面"></a><code>线程组</code>界面</h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-a2256ed6ed911e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>线程数：线程数目<br>Ramp-Up时间：几秒内启动<br>循环次数：默认1次</p></blockquote><h5 id="创建一个HTTP请求默认值"><a href="#创建一个HTTP请求默认值" class="headerlink" title="创建一个HTTP请求默认值"></a>创建一个<code>HTTP请求默认值</code></h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-6eea37e8229ca7c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="HTTP请求默认值界面"><a href="#HTTP请求默认值界面" class="headerlink" title="HTTP请求默认值界面"></a><code>HTTP请求默认值</code>界面</h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-f6eab1875b56f053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="创建HTTP请求"><a href="#创建HTTP请求" class="headerlink" title="创建HTTP请求"></a>创建<code>HTTP请求</code></h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-db8a5bbb7de87d27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>配置访问路径</p></blockquote><h5 id="HTTP请求页面"><a href="#HTTP请求页面" class="headerlink" title="HTTP请求页面"></a><code>HTTP请求</code>页面</h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-c87e1ee4e2153e26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a>创建<code>监听器</code></h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-caa4b7aa5a707020.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="监听器页面"><a href="#监听器页面" class="headerlink" title="监听器页面"></a><code>监听器</code>页面</h5><p><img src="https://upload-images.jianshu.io/upload_images/14481291-f66183697822b33c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p> 吞吐量直观看到每秒运行的数量</p></blockquote><h2 id="模拟多用户"><a href="#模拟多用户" class="headerlink" title="模拟多用户"></a>模拟多用户</h2>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study20/"/>
      <url>/2020/03/02/study20/</url>
      
        <content type="html"><![CDATA[<p>title: 常用注解<br>date: 2019-11-02 00:00:30<br>tags: </p><ul><li>Java<br>categories: 注解</li></ul><p>拷贝自</p><p><a href="https://blog.csdn.net/qq920447939/article/details/80198438" target="_blank" rel="noopener">链接1</a></p><p><a href="https://baijiahao.baidu.com/s?id=1610074580703216570&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">链接2</a></p><a id="more"></a><blockquote><p>@Null  被注释的元素必须为null<br>@NotNull  被注释的元素不能为null<br>@AssertTrue  被注释的元素必须为true<br>@AssertFalse  被注释的元素必须为false<br>@Min(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@Max(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@Size(max,min)  被注释的元素的大小必须在指定的范围内。<br>@Digits(integer,fraction)  被注释的元素必须是一个数字，其值必须在可接受的范围内<br>@Past  被注释的元素必须是一个过去的日期<br>@Future  被注释的元素必须是一个将来的日期<br>@Pattern(value) 被注释的元素必须符合指定的正则表达式。<br>@Email 被注释的元素必须是电子邮件地址<br>@Length 被注释的字符串的大小必须在指定的范围内<br>@NotEmpty  被注释的字符串必须非空<br>@Range  被注释的元素必须在合适的范围</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">Spring部分</span><br><span class="line"></span><br><span class="line">1.声明bean的注解</span><br><span class="line"></span><br><span class="line">@Component 组件，没有明确的角色</span><br><span class="line"></span><br><span class="line">@Service 在业务逻辑层使用（service层）</span><br><span class="line"></span><br><span class="line">@Repository 在数据访问层使用（dao层）</span><br><span class="line"></span><br><span class="line">@Controller 在展现层使用，控制器的声明（C）</span><br><span class="line"></span><br><span class="line">2.注入bean的注解</span><br><span class="line"></span><br><span class="line">@Autowired：由Spring提供</span><br><span class="line"></span><br><span class="line">@Inject：由JSR-330提供</span><br><span class="line"></span><br><span class="line">@Resource：由JSR-250提供</span><br><span class="line"></span><br><span class="line">都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</span><br><span class="line"></span><br><span class="line">3.java配置类相关注解</span><br><span class="line"></span><br><span class="line">@Configuration 声明当前类为配置类，相当于xml形式的Spring配置（类上）</span><br><span class="line"></span><br><span class="line">@Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）</span><br><span class="line"></span><br><span class="line">@Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean（类上）</span><br><span class="line"></span><br><span class="line">@ComponentScan 用于对Component进行扫描，相当于xml中的（类上）</span><br><span class="line"></span><br><span class="line">@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</span><br><span class="line"></span><br><span class="line">4.切面（AOP）相关注解</span><br><span class="line"></span><br><span class="line">Spring支持AspectJ的注解式切面编程。</span><br><span class="line"></span><br><span class="line">@Aspect 声明一个切面（类上） 使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。</span><br><span class="line"></span><br><span class="line">@After 在方法执行之后执行（方法上） @Before 在方法执行之前执行（方法上） @Around 在方法执行之前与之后执行（方法上）</span><br><span class="line"></span><br><span class="line">@PointCut 声明切点 在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）</span><br><span class="line"></span><br><span class="line">5.@Bean的属性支持</span><br><span class="line"></span><br><span class="line">@Scope 设置Spring容器如何新建Bean实例（方法上，得有@Bean） 其设置类型包括：</span><br><span class="line"></span><br><span class="line">Singleton （单例,一个Spring容器中只有一个bean实例，默认模式）, Protetype （每次调用新建一个bean）, Request （web项目中，给每个http request新建一个bean）, Session （web项目中，给每个http session新建一个bean）, GlobalSession（给每一个 global http session新建一个Bean实例）</span><br><span class="line"></span><br><span class="line">@StepScope 在Spring Batch中还有涉及</span><br><span class="line"></span><br><span class="line">@PostConstruct 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</span><br><span class="line"></span><br><span class="line">@PreDestory 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</span><br><span class="line"></span><br><span class="line">6.@Value注解</span><br><span class="line"></span><br><span class="line">@Value 为属性注入值（属性上） 支持如下方式的注入： 》注入普通字符</span><br><span class="line"></span><br><span class="line">@Value(&quot;Michael Jackson&quot;)String name;</span><br><span class="line"></span><br><span class="line">》注入操作系统属性</span><br><span class="line"></span><br><span class="line">@Value(&quot;#&#123;systemProperties[&apos;os.name&apos;]&#125;&quot;)String osName;</span><br><span class="line"></span><br><span class="line">》注入表达式结果</span><br><span class="line"></span><br><span class="line">@Value(&quot;#&#123; T(java.lang.Math).random() * 100 &#125;&quot;) String randomNumber;</span><br><span class="line"></span><br><span class="line">》注入其它bean属性</span><br><span class="line"></span><br><span class="line">@Value(&quot;#&#123;domeClass.name&#125;&quot;)String name;</span><br><span class="line"></span><br><span class="line">》注入文件资源</span><br><span class="line"></span><br><span class="line">@Value(&quot;classpath:com/hgs/hello/test.txt&quot;)String Resource file;</span><br><span class="line"></span><br><span class="line">》注入网站资源</span><br><span class="line"></span><br><span class="line">@Value(&quot;http://www.cznovel.com&quot;)Resource url;</span><br><span class="line"></span><br><span class="line">》注入配置文件</span><br><span class="line"></span><br><span class="line">Value(&quot;$&#123;book.name&#125;&quot;)String bookName;</span><br><span class="line"></span><br><span class="line">注入配置使用方法： ① 编写配置文件（test.properties）</span><br><span class="line"></span><br><span class="line">book.name=《三体》</span><br><span class="line"></span><br><span class="line">② @PropertySource 加载配置文件(类上)</span><br><span class="line"></span><br><span class="line">@PropertySource(&quot;classpath:com/hgs/hello/test/test.propertie&quot;)</span><br><span class="line"></span><br><span class="line">③ 还需配置一个PropertySourcesPlaceholderConfigurer的bean。</span><br><span class="line"></span><br><span class="line">7.环境切换</span><br><span class="line"></span><br><span class="line">@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）</span><br><span class="line"></span><br><span class="line">@Conditional Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）</span><br><span class="line"></span><br><span class="line">8.异步相关</span><br><span class="line"></span><br><span class="line">@EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）</span><br><span class="line"></span><br><span class="line">@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</span><br><span class="line"></span><br><span class="line">9.定时任务相关</span><br><span class="line"></span><br><span class="line">@EnableScheduling 在配置类上使用，开启计划任务的支持（类上）</span><br><span class="line"></span><br><span class="line">@Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</span><br><span class="line"></span><br><span class="line">10.@Enable*注解说明</span><br><span class="line"></span><br><span class="line">这些注解主要用来开启对xxx的支持。 @EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</span><br><span class="line"></span><br><span class="line">@EnableAsync 开启异步方法的支持</span><br><span class="line"></span><br><span class="line">@EnableScheduling 开启计划任务的支持</span><br><span class="line"></span><br><span class="line">@EnableWebMvc 开启Web MVC的配置支持</span><br><span class="line"></span><br><span class="line">@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</span><br><span class="line"></span><br><span class="line">@EnableJpaRepositories 开启对SpringData JPA Repository的支持</span><br><span class="line"></span><br><span class="line">@EnableTransactionManagement 开启注解式事务的支持</span><br><span class="line"></span><br><span class="line">@EnableTransactionManagement 开启注解式事务的支持</span><br><span class="line"></span><br><span class="line">@EnableCaching 开启注解式的缓存支持</span><br><span class="line"></span><br><span class="line">11.测试相关注解</span><br><span class="line"></span><br><span class="line">@RunWith 运行器，Spring中通常用于对JUnit的支持</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line"></span><br><span class="line">@ContextConfiguration 用来加载配置ApplicationContext，其中classes属性用来加载配置类</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(classes=&#123;TestConfig.class&#125;)</span><br><span class="line"></span><br><span class="line">SpringMVC部分</span><br><span class="line"></span><br><span class="line">@EnableWebMvc 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。</span><br><span class="line"></span><br><span class="line">@Controller 声明该类为SpringMVC中的Controller</span><br><span class="line"></span><br><span class="line">@RequestMapping 用于映射Web请求，包括访问路径和参数（类或方法上）</span><br><span class="line"></span><br><span class="line">@ResponseBody 支持将返回值放在response内，而不是一个页面，通常用户返回json数据（返回值旁或方法上）</span><br><span class="line"></span><br><span class="line">@RequestBody 允许request的参数在request体中，而不是在直接连接在地址后面。（放在参数前）</span><br><span class="line"></span><br><span class="line">@PathVariable 用于接收路径参数，比如@RequestMapping(“/hello/&#123;name&#125;”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</span><br><span class="line"></span><br><span class="line">@RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</span><br><span class="line"></span><br><span class="line">@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上， 这对所有注解了 @RequestMapping的控制器内的方法有效。</span><br><span class="line"></span><br><span class="line">@ExceptionHandler 用于全局处理控制器里的异常</span><br><span class="line"></span><br><span class="line">@InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</span><br><span class="line"></span><br><span class="line">@ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study19/"/>
      <url>/2020/03/02/study19/</url>
      
        <content type="html"><![CDATA[<p>title: Spring Boot配置Dubbo<br>date: 2019-10-25 19:08:30<br>tags: </p><ul><li>Java<br>categories: Dubbo</li></ul><h1 id="搭建dubbo基础环境"><a href="#搭建dubbo基础环境" class="headerlink" title="搭建dubbo基础环境"></a>搭建dubbo基础环境</h1><ul><li>创建项目</li><li>创建提供者和消费者两个module</li></ul><a id="more"></a><p> 目录结构如下图所示</p><blockquote><p>父module：<code>cateye_center_base</code><br>子module：<code>cateye_center_order</code> <code>cateye_center_user</code><br>提供者：<code>cateye_center_user</code><br>消费者：<code>cateye_center_order</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-0a1f2a20c6990691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="提供者服务"><a href="#提供者服务" class="headerlink" title="提供者服务"></a>提供者服务</h1><p><a href="https://github.com/alibaba/dubbo-spring-boot-starter" target="_blank" rel="noopener">官网</a></p><ul><li><p>父<code>pom.xml</code>添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置文件<code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=dubbo-spring-boot-starter</span><br><span class="line">spring.dubbo.server=true</span><br><span class="line">spring.dubbo.registry=N/A</span><br></pre></td></tr></table></figure></li><li><p>Spring Boot Application的上添加@EnableDubboConfiguration</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.evan;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDubboConfiguration</span><br><span class="line">public class CateyeCenterUserApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(CateyeCenterUserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写dubbo服务<br><code>ApiService</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.dubbo.api;</span><br><span class="line"></span><br><span class="line">public interface ApiService &#123;</span><br><span class="line">    String sendMessage(String message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>ProviderServiceImpl</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.dubbo.api.impl;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line">import com.evan.dubbo.api.ApiService;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@Service(interfaceClass = ApiService.class)</span><br><span class="line">public class ProviderServiceImpl implements ApiService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String sendMessage(String message) &#123;</span><br><span class="line">        return &quot;provider:&quot;+message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>启动提供者服务<br><img src="https://upload-images.jianshu.io/upload_images/14481291-228ad3eda7c80075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><h1 id="消费者服务"><a href="#消费者服务" class="headerlink" title="消费者服务"></a>消费者服务</h1><ul><li><p>配置文件<code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=dubbo-spring-boot-starter</span><br></pre></td></tr></table></figure></li><li><p>Spring Boot Application的上添加@EnableDubboConfiguration</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.evan;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line">import com.evan.dubbo.api.impl.ConsumerServiceImpl;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDubboConfiguration</span><br><span class="line">public class CateyeCenterOrderApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(CateyeCenterOrderApplication.class, args);</span><br><span class="line"></span><br><span class="line">        ConsumerServiceImpl consumerServiceImpl = (ConsumerServiceImpl) context.getBean(&quot;consumerServiceImpl&quot;);</span><br><span class="line">        consumerServiceImpl.sendMessage(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写dubbo服务，通过@Reference注入需要使用的interface<br><code>ApiService</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.dubbo.api;</span><br><span class="line"></span><br><span class="line">public interface ApiService &#123;</span><br><span class="line">    String sendMessage(String message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>ConsumerServiceImpl</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.evan.dubbo.api.impl;</span><br><span class="line"></span><br><span class="line">import com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line">import com.evan.dubbo.api.ApiService;</span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class ConsumerServiceImpl &#123;</span><br><span class="line">    private static final Logger logger = LoggerFactory.getLogger(ConsumerServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Reference(url = &quot;dubbo://localhost:20880&quot;)</span><br><span class="line">    ApiService apiService;</span><br><span class="line"></span><br><span class="line">    public void sendMessage(String message)&#123;</span><br><span class="line">        logger.info(apiService.sendMessage(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>启动消费者服务<br><img src="https://upload-images.jianshu.io/upload_images/14481291-8247a1af78937a47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><h1 id="集成注册中心"><a href="#集成注册中心" class="headerlink" title="集成注册中心"></a>集成注册中心</h1><p><strong>前提是已经安装zookeeper并且启动</strong></p><ul><li><p>添加zookeeper依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.4.9&lt;/version&gt;</span><br><span class="line">      &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改提供者配置文件<br><code>spring.dubbo.registry=N/A</code>修改为<code>spring.dubbo.registry=zookeeper://localhost:2181</code></p></li><li><p>修改消费者配置文件<br>添加<code>spring.dubbo.registry=zookeeper://localhost:2181</code></p></li><li><p>修改<code>@Reference</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Reference(interfaceClass = ApiService.class)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study18/"/>
      <url>/2020/03/02/study18/</url>
      
        <content type="html"><![CDATA[<p>title: Java:图片验证码产生和验证<br>date: 2019-10-20 11:45:30<br>tags: </p><ul><li>Java<br>categories: 其他</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h5 id="注：均通过代码注释讲解验证码生成，Redis集成的代码未粘出，各位看官可以自己找某度。"><a href="#注：均通过代码注释讲解验证码生成，Redis集成的代码未粘出，各位看官可以自己找某度。" class="headerlink" title="注：均通过代码注释讲解验证码生成，Redis集成的代码未粘出，各位看官可以自己找某度。"></a>注：均通过代码注释讲解验证码生成，Redis集成的代码未粘出，各位看官可以自己找某度。</h5><a id="more"></a><p><code>html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//前端html</span><br><span class="line">&lt;img id=&quot;verifyCodeImg&quot; width=&quot;80&quot; height=&quot;32&quot; src=&quot;/codeImg/verifyCodeRegister&quot; type=&quot;text&quot; onclick=&quot;refreshVerifyCode()&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p><code>CodeImgKey</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//缓存有效时间</span><br><span class="line">public class CodeImgKey extends BasePrefix&#123;</span><br><span class="line">    private CodeImgKey(int expireSeconds, String prefix) &#123;</span><br><span class="line">super(expireSeconds, prefix);</span><br><span class="line">&#125;</span><br><span class="line">public static CodeImgKey getVerifyCode = new CodeImgKey(300, &quot;vc&quot;);</span><br><span class="line">public static CodeImgKey getVerifyCodeRegister = new CodeImgKey(300, &quot;codeImg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>CodeImgService</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class CodeImgService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RedisService redisService;</span><br><span class="line"></span><br><span class="line">    public BufferedImage createVerifyCodeRegister() &#123;</span><br><span class="line">        int width = 100;</span><br><span class="line">        int height = 32;</span><br><span class="line">        // 1.创建一个全新的BufferedImage对象，直接调用BufferedImage的构造函数</span><br><span class="line">        // width:图像的宽度，height:图像的高度，BufferedImage.TYPE_INT_RGB:图像字节灰度图像</span><br><span class="line">        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">        // 2.在该图像上获取画笔</span><br><span class="line">        Graphics g = image.getGraphics();</span><br><span class="line"></span><br><span class="line">        // 3.设置图像背景色和前景色</span><br><span class="line">        g.setColor(new Color(0xDCDCDC));//设置笔刷颜色</span><br><span class="line">        g.fillRect(0, 0, width, height);//填充整个屏幕 (x,y,w,h)</span><br><span class="line"></span><br><span class="line">        // 4.设定边框颜色</span><br><span class="line">        g.setColor(Color.black);</span><br><span class="line">        g.drawRect(0, 0, width - 1, height - 1);</span><br><span class="line"></span><br><span class="line">        // 5.设置干扰线</span><br><span class="line">        Random rdm = new Random();</span><br><span class="line">        for (int i = 0; i &lt; 50; i++) &#123;</span><br><span class="line">            int x = rdm.nextInt(width);</span><br><span class="line">            int y = rdm.nextInt(height);</span><br><span class="line">            g.drawOval(x, y, 0, 0);</span><br><span class="line">        &#125;</span><br><span class="line">        // 6.获取验证码</span><br><span class="line">        String verifyCode = generateVerifyCode(rdm);</span><br><span class="line"></span><br><span class="line">        // 7.设置字体</span><br><span class="line">        g.setColor(new Color(0, 100, 0));</span><br><span class="line">        g.setFont(new Font(&quot;Candara&quot;, Font.BOLD, 24));</span><br><span class="line"></span><br><span class="line">        // 8.利用画笔向图像中写随机验证码(验证码,x轴,y轴)</span><br><span class="line">        g.drawString(verifyCode, 8, 24);</span><br><span class="line"></span><br><span class="line">        // 9.释放画笔资源</span><br><span class="line">        g.dispose();</span><br><span class="line"></span><br><span class="line">        // 10.把验证码存到redis中</span><br><span class="line">        int rnd = calc(verifyCode);</span><br><span class="line">        redisService.set(SpeedKillKey.getMiaoshaVerifyCodeRegister,&quot;regitser&quot;,rnd);</span><br><span class="line">        // 11.输出图片</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static int calc(String exp) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ScriptEngineManager manager = new ScriptEngineManager();</span><br><span class="line">            ScriptEngine engine = manager.getEngineByName(&quot;JavaScript&quot;);</span><br><span class="line">            Integer catch1 = (Integer)engine.eval(exp);</span><br><span class="line">            return catch1.intValue();</span><br><span class="line">        &#125;catch(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * + - *</span><br><span class="line">     */</span><br><span class="line">    private static char[] ops = new char[] &#123;&apos;+&apos;, &apos;-&apos;, &apos;*&apos;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证码内容</span><br><span class="line">     * @param rdm</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private String generateVerifyCode(Random rdm) &#123;</span><br><span class="line">        int num1 = rdm.nextInt(10);</span><br><span class="line">        int num2 = rdm.nextInt(10);</span><br><span class="line">        int num3 = rdm.nextInt(10);</span><br><span class="line">        char op1 = ops[rdm.nextInt(3)];</span><br><span class="line">        char op2 = ops[rdm.nextInt(3)];</span><br><span class="line">        String exp = &quot;&quot;+ num1 + op1 + num2 + op2 + num3;</span><br><span class="line">        return exp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缓存中取出注册时验证码</span><br><span class="line">     * @param verifyCode</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean checkVerifyCodeRegister(int verifyCode) &#123;</span><br><span class="line">        Integer codeOld = redisService.get(CodeImgKey.getVerifyCodeRegister,&quot;codeImg&quot;, Integer.class);</span><br><span class="line">        if(codeOld == null || codeOld - verifyCode != 0 ) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        redisService.delete(CodeImgKey.getVerifyCode, &quot;codeImg&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><code>CodeImgController</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/codeImg&quot;)</span><br><span class="line">public class CodeImgController &#123;</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(CodeImgController.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    CodeImgService codeImgService;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">     * 验证码生成</span><br><span class="line">     * @param response</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(value = &quot;/verifyCodeRegister&quot;, method = RequestMethod.GET)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object getMiaoshaVerifyCod(HttpServletResponse response</span><br><span class="line">    ) &#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(&quot;code&quot;,&quot;0000&quot;);</span><br><span class="line">        result.put(&quot;desc&quot;,&quot;success&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            BufferedImage image = codeImgService.createVerifyCodeRegister();</span><br><span class="line">            OutputStream out = response.getOutputStream();</span><br><span class="line">            //输出验证码，是service中生成验证码的步骤，迁移至此</span><br><span class="line">            ImageIO.write(image, &quot;JPEG&quot;, out);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;生成验证码错误:&#123;&#125;&quot;, e);</span><br><span class="line">            result.put(&quot;code&quot;, &quot;9999&quot;);</span><br><span class="line">            result.put(&quot;desc&quot;, &quot;error&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">     * 验证码校验</span><br><span class="line">     * @param response</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;doCheckCode&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public Object doCheckCode(HttpServletRequest request, HttpServletResponse response )&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = new HashMap&lt;String, Object&gt;();</span><br><span class="line">        result.put(&quot;code&quot;,&quot;0000&quot;);</span><br><span class="line">        result.put(&quot;desc&quot;,&quot;success&quot;);</span><br><span class="line"></span><br><span class="line">        String verifyCode = request.getParameter(&quot;verifyCode&quot;);</span><br><span class="line">        //校验验证码</span><br><span class="line">        boolean check = speedKillUserService.checkVerifyCodeRegister(Integer.valueOf(verifyCode));</span><br><span class="line">        if(!check)&#123;</span><br><span class="line">            result.put(&quot;code&quot;, &quot;9999&quot;);</span><br><span class="line">            result.put(&quot;desc&quot;, &quot;error&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://upload-images.jianshu.io/upload_images/14481291-20cda373065694ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2020/03/02/study17/"/>
      <url>/2020/03/02/study17/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">title</span>: 消息中间件<span class="selector-tag">ActiveMQ</span></span><br><span class="line"><span class="selector-tag">date</span>: 2019<span class="selector-tag">-10-10</span> 19<span class="selector-pseudo">:57</span><span class="selector-pseudo">:32</span></span><br><span class="line"><span class="selector-tag">tags</span>: <span class="selector-tag">Java</span></span><br><span class="line"><span class="selector-tag">categories</span>: <span class="selector-tag">ActiveMQ</span></span><br></pre></td></tr></table></figure><h1 id="消息中间件概述"><a href="#消息中间件概述" class="headerlink" title="消息中间件概述"></a>消息中间件概述</h1><h2 id="中间件介绍"><a href="#中间件介绍" class="headerlink" title="中间件介绍"></a>中间件介绍</h2><p>###什么是中间件？<br>非底层操作系统软件，非业务应用软件，不是直接给最终用户使用的，不能直接给用户带来价值的软件统称中间件。</p><a id="more"></a><p>###什么是消息中间件<br>关注于数据的发送与接收，利用高效可靠的异步消息传递机制集成分布式系统。</p><p>###消息中间件图示<br><img src="https://upload-images.jianshu.io/upload_images/14481291-e3dc5c03f7a90f5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>应用A通过应用程序接口向消息中间件发送消息，应用B通过应用程序接口向消息中间件接收消息。</p><p>###什么是JMS<br>Java消息服务（Java Message Service）即JMS，是一个Java平台中关于面向消息中间件的API，用于在两个应用程序之间，或分布式系统中发送/接收消息，进行异步通信。</p><p>###什么是AMQ<br>AMQP，即Advanced Message Queuing Protocol,一个提供统一消息服务的应用层标准协议,基于此协议的客户端与消息中间件可传递消息，并不受客户端中间件不同产品，不同的开发语言等条件的限制。</p><h3 id="JMS和AMQP对比"><a href="#JMS和AMQP对比" class="headerlink" title="JMS和AMQP对比"></a>JMS和AMQP对比</h3><p><img src="https://upload-images.jianshu.io/upload_images/14481291-7e5d75444a23e970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="常见消息中间件对比"><a href="#常见消息中间件对比" class="headerlink" title="常见消息中间件对比"></a>常见消息中间件对比</h3><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><ul><li>多种语言和协议编写客户端，语言：Java、C语言、C++、C#、Ruby、Perl、Python、PHP。应用协议：OpenWire、Stomp REST、WS Notification、XMPP、AMQP。</li><li>完全支持JMS1.1和J2EE1.4规范（持久化、XA消息、事务）</li><li>虚拟主题、组合目的、镜像队列<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4></li><li>支持多种客户端，如Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript等</li><li>AMQP的完整实现</li><li>事务支持/发布确认</li><li>消息持久化<h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4>Kafka是一种高吞吐量的分布式发布订阅消息系统，是一个分布式的、分区的、可靠的分布式日志存储服务。它通过一种独一无二的设计提供了消息系统的功能。<h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5></li><li>消息的持久化</li><li>高吞吐量</li><li>Partition、Consumer Group</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14481291-38ced69006bf2557.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="综合对比"></p><h2 id="JMS规范"><a href="#JMS规范" class="headerlink" title="JMS规范"></a>JMS规范</h2><h3 id="Java消息服务定义"><a href="#Java消息服务定义" class="headerlink" title="Java消息服务定义"></a>Java消息服务定义</h3><p>Java消息服务（Java Message Service）即JMS，是一个Java平台中关于面向消息中间件的API，用于在两个应用程序之间，或分布式系统中发送/接收消息，进行异步通信。</p><h3 id="JMS概念"><a href="#JMS概念" class="headerlink" title="JMS概念"></a>JMS概念</h3><ul><li>提供者：实现JMS规范的消息中间件服务器</li><li>客户端：发送或接收消息额应用程序</li><li>生产者/发布者：创建并发送消息的客户端</li><li>消费者/订阅者：接收并处理消息的客户端</li><li>消息： 应用程序间传递的数据内容</li><li>消息模式：在客户端间传递消息的方式，JMS中定义了主题和队列两种模式<h3 id="消息模式"><a href="#消息模式" class="headerlink" title="消息模式"></a>消息模式</h3><h4 id="队列模型"><a href="#队列模型" class="headerlink" title="队列模型"></a>队列模型</h4></li><li>客户端包括生产者和消费者</li><li>队列中的消息只能被一个消费者消费</li><li>消费者可以随时消费队列中的消息<h5 id="队列模型示意图"><a href="#队列模型示意图" class="headerlink" title="队列模型示意图"></a>队列模型示意图</h5><img src="https://upload-images.jianshu.io/upload_images/14481291-7572bfb7737aba2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><h4 id="主题模型"><a href="#主题模型" class="headerlink" title="主题模型"></a>主题模型</h4></li><li>客户端包括生产者和消费者</li><li>主题中的消息被所有订阅者消费</li><li>消费者不能消费订阅之前就发送到主题中的消息<h5 id="队列模型示意图-1"><a href="#队列模型示意图-1" class="headerlink" title="队列模型示意图"></a>队列模型示意图</h5><img src="https://upload-images.jianshu.io/upload_images/14481291-a8ade2f0f803f64d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><h4 id="JMS编码规范"><a href="#JMS编码规范" class="headerlink" title="JMS编码规范"></a>JMS编码规范</h4></li><li>ConnectionFactory：用于创建连接到消息中间件的连接工厂</li><li>Connection：“链接”,代表了应用程序和消息服务器之间的通信链路</li><li>Destination：“目的地”,指消息发布和接收的地点，包括队列或主题</li><li>Session：“会话”,表示一个单线程的上下文，用于发送和接收消息</li><li>MessageConsumer：“消费者”,一种可以向JMS提供获取消息的客户端类型</li><li>MessageProducer：“生产者”,消费者和生产者间传送的对象，消息头，一组消息属性，一个消息体<h4 id="JMS编码接口之间的关系"><a href="#JMS编码接口之间的关系" class="headerlink" title="JMS编码接口之间的关系"></a>JMS编码接口之间的关系</h4><img src="https://upload-images.jianshu.io/upload_images/14481291-f116a19b98206435.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><h2 id="windows下安装ActiveMQ"><a href="#windows下安装ActiveMQ" class="headerlink" title="windows下安装ActiveMQ"></a>windows下安装ActiveMQ</h2><h2 id="Linux下安装ActiveMQ"><a href="#Linux下安装ActiveMQ" class="headerlink" title="Linux下安装ActiveMQ"></a>Linux下安装ActiveMQ</h2><h2 id="队列模式的消息演示"><a href="#队列模式的消息演示" class="headerlink" title="队列模式的消息演示"></a>队列模式的消息演示</h2><code>pom.xml</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;activemq-all&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.13.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li></ul><p><code>ActiveMqProducer.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.jms.queue;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">import javax.jms.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/7/4</span><br><span class="line"> * @Description: 生产者</span><br><span class="line"> */</span><br><span class="line">public class ActiveMqProducer &#123;</span><br><span class="line">    private static final String url = &quot;tcp://192:168.31.10:61616&quot;;</span><br><span class="line">    private static final String queueName = &quot;queue-test&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws JMSException &#123;</span><br><span class="line">        //1.创建ConnectionFactory</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);</span><br><span class="line"></span><br><span class="line">        //2.创建Connection</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3.启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4.创建会话</span><br><span class="line">        Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5.创建一个目标</span><br><span class="line">        Destination destination = session.createQueue(queueName);</span><br><span class="line"></span><br><span class="line">        //6.创建一个生产者</span><br><span class="line">        MessageProducer producer = session.createProducer(destination);</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;100;i++)&#123;</span><br><span class="line">            //7.创建消息</span><br><span class="line">            TextMessage textMessage = session.createTextMessage(&quot;test&quot; + i);</span><br><span class="line"></span><br><span class="line">            //8.发布消息</span><br><span class="line">            producer.send(textMessage);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;发送消息：&quot;+textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //9.关闭连接</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ActiveMqConsumer.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.jms.queue;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">import javax.jms.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/7/4</span><br><span class="line"> * @Description: 消费者</span><br><span class="line"> */</span><br><span class="line">public class ActiveMqConsumer &#123;</span><br><span class="line">    private static final String url = &quot;tcp://192:168.31.10:61616&quot;;</span><br><span class="line">    private static final String queueName = &quot;queue-test&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws JMSException &#123;</span><br><span class="line">        //1.创建ConnectionFactory</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);</span><br><span class="line"></span><br><span class="line">        //2.创建Connection</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3.启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4.创建会话</span><br><span class="line">        Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5.创建一个目标</span><br><span class="line">        Destination destination = session.createQueue(queueName);</span><br><span class="line"></span><br><span class="line">        //6.创建消费者</span><br><span class="line">        MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line"></span><br><span class="line">        //7.创建一个监听器</span><br><span class="line">        consumer.setMessageListener(new MessageListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onMessage(Message message) &#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                try &#123;</span><br><span class="line">                    System.out.println(&quot;接收消息：&quot;+textMessage.getText());</span><br><span class="line">                &#125;catch (JMSException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="主题模式的消息演示"><a href="#主题模式的消息演示" class="headerlink" title="主题模式的消息演示"></a>主题模式的消息演示</h2><p><code>ActiveMqProducer.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.jms.topic;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">import javax.jms.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/7/4</span><br><span class="line"> * @Description: 生产者</span><br><span class="line"> */</span><br><span class="line">public class ActiveMqProducer &#123;</span><br><span class="line">    private static final String url = &quot;tcp://192:168.31.10:61616&quot;;</span><br><span class="line">    private static final String topicName = &quot;topic-test&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws JMSException &#123;</span><br><span class="line">        //1.创建ConnectionFactory</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);</span><br><span class="line"></span><br><span class="line">        //2.创建Connection</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3.启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4.创建会话</span><br><span class="line">        Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5.创建一个目标</span><br><span class="line">        Destination destination = session.createTopic(topicName);</span><br><span class="line"></span><br><span class="line">        //6.创建一个生产者</span><br><span class="line">        MessageProducer producer = session.createProducer(destination);</span><br><span class="line"></span><br><span class="line">        for(int i=0;i&lt;100;i++)&#123;</span><br><span class="line">            //7.创建消息</span><br><span class="line">            TextMessage textMessage = session.createTextMessage(&quot;test&quot; + i);</span><br><span class="line"></span><br><span class="line">            //8.发布消息</span><br><span class="line">            producer.send(textMessage);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;发送消息：&quot;+textMessage.getText());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //9.关闭连接</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ActiveMqConsumer.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.jms.topic;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line">import javax.jms.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/7/4</span><br><span class="line"> * @Description: 消费者</span><br><span class="line"> */</span><br><span class="line">public class ActiveMqConsumer &#123;</span><br><span class="line">    private static final String url = &quot;tcp://192:168.31.10:61616&quot;;</span><br><span class="line">    private static final String topicName = &quot;topic-test&quot;;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws JMSException &#123;</span><br><span class="line">        //1.创建ConnectionFactory</span><br><span class="line">        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url);</span><br><span class="line"></span><br><span class="line">        //2.创建Connection</span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line"></span><br><span class="line">        //3.启动连接</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        //4.创建会话</span><br><span class="line">        Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        //5.创建一个目标</span><br><span class="line">        Destination destination = session.createTopic(topicName);</span><br><span class="line"></span><br><span class="line">        //6.创建消费者</span><br><span class="line">        MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line"></span><br><span class="line">        //7.创建一个监听器</span><br><span class="line">        consumer.setMessageListener(new MessageListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onMessage(Message message) &#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                try &#123;</span><br><span class="line">                    System.out.println(&quot;接收消息：&quot;+textMessage.getText());</span><br><span class="line">                &#125;catch (JMSException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="activemq模式区分"><a href="#activemq模式区分" class="headerlink" title="activemq模式区分"></a>activemq模式区分</h4><p>队列模式：生产者发送消息，所有消费者对消息进行平分，已消费的消息不能重新消费<br>主题模式：生产者发送消息，所有已订阅主题的消费者都能收到消息。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>kafka流处理平台</title>
      <link href="/2019/10/05/study16/"/>
      <url>/2019/10/05/study16/</url>
      
        <content type="html"><![CDATA[<p>Apache Kafka起源于LinkedIn，后来于2011年成为开源Apache项目，然后于2012年成为First-class Apache项目。Kafka是用Scala和Java编写的。 Apache Kafka是基于发布订阅的容错消息系统。 它是快速，可扩展和设计分布。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/14481291-e1295f1367533f1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Kafka"></p><h1 id="kafka介绍"><a href="#kafka介绍" class="headerlink" title="kafka介绍"></a>kafka介绍</h1><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>根据官网的介绍，ApacheKafka®是一个分布式流媒体平台，它主要有3种功能：</p><ol><li><p>发布和订阅消息流，这个功能类似于消息队列，这也是kafka归类为消息队列框架的原因</p></li><li><p>以容错的方式记录消息流，kafka以文件的方式来存储消息流</p></li><li><p>可以再消息发布的时候进行处理</p></li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>在系统或应用程序之间构建可靠的用于传输实时数据的管道，消息队列功能</li><li>构建实时的流数据处理程序来变换或处理数据流，数据处理功能<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><code>Producer</code>: 消息和数据的生产者，向kafka的一个Topic发布消息的进程/代码/服务</li></ul><p><code>Consumer</code>:消息和数据的消费者，订阅数据（topic）并且处理其发布的消息的进程/代码/服务</p><p><code>Consumer Group</code>:逻辑概念，对于同一个topic，会广播给不同的group，一个group中，只有一个consumer可以消费该消息</p><p><code>Broker</code>:物理概念，kafka集群中的每个kafka节点</p><p><code>Topic</code>:逻辑概念，kafka消息的类别，对数据进行区分、隔离</p><p><code>Partition</code>:物理概念，kafka下数据存储的基本单元。一个topic数据，会被分散存储到多个Partition，每一个Partition是有序的</p><p><code>Replication</code>:同一个Partition可能会多个Replica，多个Replica之间数据是一样的</p><p><code>Replication Leader</code>:一个Partition的多个Replica上，需要一个Leader负责该Partition上与Producer和Consumer交互</p><p><code>ReplicaManager</code>:负责管理当前broker所有分区和副本的信息，处理KafkaController发起的一些请求，副本状态的切换、添加/读取消息等</p><h2 id="基本概念延伸"><a href="#基本概念延伸" class="headerlink" title="基本概念延伸"></a>基本概念延伸</h2><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><ul><li>每一个Topic被切分为多个Partitions</li><li>消费者数目少于或等于Partition的数目</li><li>Broker Group中的每一个Broker保存Topic的一个或多个Partitions</li><li>Consumer Group中的仅有一个Consumer读取Topic的一个或多个Partitions，并且是唯一的Consumer<h3 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h3></li><li>当集群中有Broker挂掉的情况，系统可以主动地使Replicas提供服务</li><li>系统默认设置每一个Topic的Replication系数为1，可以在创建Topic时单独设置<h4 id="Replication特点"><a href="#Replication特点" class="headerlink" title="Replication特点"></a>Replication特点</h4></li><li>Replication的基本单位是Topic的Partition</li><li>所有的读和写都从Leader进，Followers只是作为备份</li><li>Follower必须能够及时复制Leader的数据</li><li>增加容错性和可扩展性<h2 id="kafka基本结构"><a href="#kafka基本结构" class="headerlink" title="kafka基本结构"></a>kafka基本结构</h2><h3 id="消息传输流程"><a href="#消息传输流程" class="headerlink" title="消息传输流程"></a>消息传输流程</h3><img src="https://upload-images.jianshu.io/upload_images/14481291-7e10f04a7d8c7675.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消息传输流程"></li><li>Producers API</li><li>Consumers API</li><li>Streams API</li><li>Connectors API<br>下图更好的展示了kafka消息队列模式的运作<br><img src="https://upload-images.jianshu.io/upload_images/14481291-aded29d894cf6e21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kafka消息队列模式"><h3 id="kafka的消息结构"><a href="#kafka的消息结构" class="headerlink" title="kafka的消息结构"></a>kafka的消息结构</h3></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14481291-c692a936c1f1dc8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="消息结构"></p><h2 id="kafka特点"><a href="#kafka特点" class="headerlink" title="kafka特点"></a>kafka特点</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><ul><li>多分区</li><li>多副本</li><li>多订阅者</li><li>基于ZooKeeper调度<h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3></li><li>高吞吐量</li><li>低延迟</li><li>高并发</li><li>时间复杂度为O(1)<h3 id="持久性和扩展性"><a href="#持久性和扩展性" class="headerlink" title="持久性和扩展性"></a>持久性和扩展性</h3></li><li>数据可持久化</li><li>容错性</li><li>支持水平在线扩展</li><li>消息自动平衡<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></li><li>消息队列</li><li>行为跟踪</li><li>元信息监控</li><li>日志收集</li><li>流处理</li><li>事件源</li><li>持久性日志（commit log）</li><li>等<h2 id="kafka简单案例"><a href="#kafka简单案例" class="headerlink" title="kafka简单案例"></a>kafka简单案例</h2><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><h4 id="ZooKeeper下载"><a href="#ZooKeeper下载" class="headerlink" title="ZooKeeper下载"></a>ZooKeeper下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://zookeeper.apache.org/releases.html#download</span><br></pre></td></tr></table></figure></li></ul><h4 id="Kafka下载"><a href="#Kafka下载" class="headerlink" title="Kafka下载"></a>Kafka下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://kafka.apache.org/downloads</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>解压、配置环境变量<br>PS：如果是Mac的话，有一个便捷安装方法，<code>brew install kafka</code></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="运行Zookeeper"><a href="#运行Zookeeper" class="headerlink" title="运行Zookeeper"></a>运行Zookeeper</h4><p>运行cmd命令窗口，输入zkServer回车，出现下图的就表示zookeeper启动成功，也表明安装成功了。<br><img src="https://upload-images.jianshu.io/upload_images/14481291-a9de232b3e40d659.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Zookeeper"></p><h4 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h4><p>在新的cmd命令行用cd命令切换到kafka根目录<code>..\kafka_2.11-2.2.0</code>，输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-server-start.bat .\config\server.properties</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-db8c74589b3b15c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kafka"><br>出现started (kafka.server.KafkaServer)字样表示启动成功</p><h4 id="创建一个Topic"><a href="#创建一个Topic" class="headerlink" title="创建一个Topic"></a>创建一个Topic</h4><p>运行新的cmd命令行，进入<code>..\kafka_2.11-2.2.0\bin\windows</code>，创建主题：<code>test</code>，输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure></p><h4 id="创建一个Producer"><a href="#创建一个Producer" class="headerlink" title="创建一个Producer"></a>创建一个Producer</h4><p>运行新的cmd命令行，进入<code>..\kafka_2.11-2.2.0\bin\windows</code>，输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.bat --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure></p><h4 id="创建一个Consumer"><a href="#创建一个Consumer" class="headerlink" title="创建一个Consumer"></a>创建一个Consumer</h4><p>运行新的cmd命令行，进入<code>..\kafka_2.11-2.2.0\bin\windows</code>，输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在Producer窗口下输入信息进行测试 ，输入的消息立马就会出现在Consumer中，表明kafka已经安装测试成功<br><img src="https://upload-images.jianshu.io/upload_images/14481291-592b958069790315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="success"></p><h2 id="kafka代码案例"><a href="#kafka代码案例" class="headerlink" title="kafka代码案例"></a>kafka代码案例</h2><p><code>项目结构</code><br><img src="https://upload-images.jianshu.io/upload_images/14481291-4948f7c4ee8d758b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><p><code>pom.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.4.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.cxy&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kafka&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;kafka&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;kafka_learning&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-kafka-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.8.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.5.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p><code>application.properties</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">kafka.consumer.zookeeper.connect=127.0.0.1:2181</span><br><span class="line">kafka.consumer.servers=127.0.0.1:9092</span><br><span class="line">kafka.consumer.enable.auto.commit=true</span><br><span class="line">kafka.consumer.session.timeout=6000</span><br><span class="line">kafka.consumer.auto.commit.interval=100</span><br><span class="line">kafka.consumer.auto.offset.reset=latest</span><br><span class="line">kafka.consumer.topic=kafkaTestTopic</span><br><span class="line">kafka.consumer.group.id=kafkaTest</span><br><span class="line">kafka.consumer.concurrency=10</span><br><span class="line"></span><br><span class="line">kafka.producer.servers=127.0.0.1:9092</span><br><span class="line">kafka.producer.retries=0</span><br><span class="line">kafka.producer.batch.size=4096</span><br><span class="line">kafka.producer.linger=1</span><br><span class="line">kafka.producer.buffer.memory=40960</span><br><span class="line"></span><br><span class="line">kafka.topic.default=kafkaTestTopic</span><br></pre></td></tr></table></figure></p><p><code>log4j.properties</code><br><figure class="highlight plain"><figcaption><span>Global logging configuration 开发时候建议使用 debug</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></p><p><code>ErrorCode.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.common;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">public class ErrorCode &#123;</span><br><span class="line">    public final static int SUCCESS = 200;</span><br><span class="line">    public final static int EXCEPTION = 500;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>MessageEntity.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.common;</span><br><span class="line"></span><br><span class="line">import lombok.EqualsAndHashCode;</span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">public class MessageEntity &#123;</span><br><span class="line">    private String title;</span><br><span class="line">    private String body;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;MessageEntity&#123;&quot; +</span><br><span class="line">                &quot;title=&apos;&quot; + title + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;,body=&apos;&quot; + body + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Response.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.common;</span><br><span class="line"></span><br><span class="line">import lombok.Getter;</span><br><span class="line">import lombok.Setter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">public class Response &#123;</span><br><span class="line">    private int code;</span><br><span class="line">    private String message;</span><br><span class="line"></span><br><span class="line">    public Response(int code, String message)&#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>KafkaProducerConfig.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.config;</span><br><span class="line"></span><br><span class="line">import com.cxy.kafka.common.MessageEntity;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line">import org.apache.kafka.common.serialization.StringSerializer;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line">import org.springframework.kafka.core.DefaultKafkaProducerFactory;</span><br><span class="line">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line">import org.springframework.kafka.core.ProducerFactory;</span><br><span class="line">import org.springframework.kafka.support.serializer.JsonSerializer;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableKafka</span><br><span class="line">public class KafkaProducerConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;kafka.producer.servers&#125;&quot;)</span><br><span class="line">    private String servers;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;kafka.producer.retries&#125;&quot;)</span><br><span class="line">    private int retries;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;kafka.producer.batch.size&#125;&quot;)</span><br><span class="line">    private int batchSize;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;kafka.producer.linger&#125;&quot;)</span><br><span class="line">    private int linger;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;kafka.producer.buffer.memory&#125;&quot;)</span><br><span class="line">    private int bufferMemory;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String,Object&gt; producerConfigs() &#123;</span><br><span class="line">        Map&lt;String,Object&gt; props = new HashMap&lt;String, Object&gt;(16);</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, servers);</span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG, retries);</span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG, batchSize);</span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG, linger);</span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        return props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ProducerFactory&lt;String, MessageEntity&gt; producerFactory()&#123;</span><br><span class="line">        return new DefaultKafkaProducerFactory&lt;String, MessageEntity&gt;(</span><br><span class="line">                producerConfigs(),</span><br><span class="line">                new StringSerializer(),</span><br><span class="line">                new JsonSerializer&lt;MessageEntity&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public KafkaTemplate&lt;String, MessageEntity&gt; kafkaTemplate()&#123;</span><br><span class="line">        return new KafkaTemplate&lt;String, MessageEntity&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>KafkaConsumerConfig.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.config;</span><br><span class="line"></span><br><span class="line">import com.cxy.kafka.common.MessageEntity;</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line">import org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line">import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;</span><br><span class="line">import org.springframework.kafka.config.KafkaListenerContainerFactory;</span><br><span class="line">import org.springframework.kafka.core.ConsumerFactory;</span><br><span class="line">import org.springframework.kafka.core.DefaultKafkaConsumerFactory;</span><br><span class="line">import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;</span><br><span class="line">import org.springframework.kafka.support.serializer.JsonDeserializer;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@EnableKafka</span><br><span class="line">public class KafkaConsumerConfig &#123;</span><br><span class="line">    @Value(&quot;$&#123;kafka.consumer.servers&#125;&quot;)</span><br><span class="line">    private String servers;</span><br><span class="line"></span><br><span class="line">    //服务是否自动提交</span><br><span class="line">    @Value(&quot;$&#123;kafka.consumer.enable.auto.commit&#125;&quot;)</span><br><span class="line">    private boolean enableAutoCommit;</span><br><span class="line"></span><br><span class="line">    //session超时时间</span><br><span class="line">    @Value(&quot;$&#123;kafka.consumer.session.timeout&#125;&quot;)</span><br><span class="line">    private String sessionTimeout;</span><br><span class="line"></span><br><span class="line">    //提交的间隔</span><br><span class="line">    @Value(&quot;$&#123;kafka.consumer.auto.commit.interval&#125;&quot;)</span><br><span class="line">    private String autoCommitInterval;</span><br><span class="line"></span><br><span class="line">    //生产者groupId</span><br><span class="line">    @Value(&quot;$&#123;kafka.consumer.group.id&#125;&quot;)</span><br><span class="line">    private String groupId;</span><br><span class="line"></span><br><span class="line">    //自动将offset重置到某位置</span><br><span class="line">    @Value(&quot;$&#123;kafka.consumer.auto.offset.reset&#125;&quot;)</span><br><span class="line">    private String autoOffsetReset;</span><br><span class="line"></span><br><span class="line">    //并发数目</span><br><span class="line">    @Value(&quot;$&#123;kafka.consumer.concurrency&#125;&quot;)</span><br><span class="line">    private int concurrency;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String,Object&gt; consumerConfigs() &#123;</span><br><span class="line">        Map&lt;String,Object&gt; props = new HashMap&lt;String, Object&gt;(16);</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, servers);</span><br><span class="line">        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, enableAutoCommit);</span><br><span class="line">        props.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, sessionTimeout);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, autoCommitInterval);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        return props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ConsumerFactory&lt;String, MessageEntity&gt; consumerFactory() &#123;</span><br><span class="line">        return new DefaultKafkaConsumerFactory&lt;String, MessageEntity&gt;(</span><br><span class="line">                consumerConfigs(),</span><br><span class="line">                new StringDeserializer(),</span><br><span class="line">                new JsonDeserializer&lt;MessageEntity&gt;(MessageEntity.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public KafkaListenerContainerFactory&lt;ConcurrentMessageListenerContainer&lt;String, MessageEntity&gt;&gt; kafkaListenerContainerFactory()&#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, MessageEntity&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;String, MessageEntity&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        factory.setConcurrency(concurrency);</span><br><span class="line">        factory.getContainerProperties().setPollTimeout(1500);</span><br><span class="line">        return factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ProducerCallback.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.producer;</span><br><span class="line"></span><br><span class="line">import com.cxy.kafka.common.MessageEntity;</span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.springframework.kafka.support.SendResult;</span><br><span class="line">import org.springframework.lang.Nullable;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFutureCallback;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class ProducerCallback implements ListenableFutureCallback&lt;SendResult&lt;String, MessageEntity&gt;&gt; &#123;</span><br><span class="line">    public static final Logger logger = Logger.getLogger(ProducerCallback.class);</span><br><span class="line"></span><br><span class="line">    private final long startTime;</span><br><span class="line"></span><br><span class="line">    private final String key;</span><br><span class="line"></span><br><span class="line">    private final MessageEntity messageEntity;</span><br><span class="line"></span><br><span class="line">    private final Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    public ProducerCallback(long startTime, String key, MessageEntity messageEntity)&#123;</span><br><span class="line">        this.startTime = startTime;</span><br><span class="line">        this.key = key;</span><br><span class="line">        this.messageEntity = messageEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onFailure(Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onSuccess(@Nullable SendResult&lt;String, MessageEntity&gt; stringMessageEntitySendResult) &#123;</span><br><span class="line">        if(stringMessageEntitySendResult == null)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        long elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line"></span><br><span class="line">        RecordMetadata metadata = stringMessageEntitySendResult.getRecordMetadata();</span><br><span class="line">        if(metadata!=null)&#123;</span><br><span class="line">            StringBuilder stringBuilder = new StringBuilder();</span><br><span class="line">            stringBuilder.append(&quot;message(&quot;)</span><br><span class="line">                    .append(&quot;key= &quot;).append(key).append(&quot;,&quot;)</span><br><span class="line">                    .append(&quot;message= &quot;).append(gson.toJson(messageEntity)).append(&quot;)&quot;)</span><br><span class="line">                    .append(&quot;sent to partition(&quot;).append(metadata.partition()).append(&quot;)&quot;)</span><br><span class="line">                    .append(&quot;with offset(&quot;).append(metadata.offset()).append(&quot;)&quot;)</span><br><span class="line">                    .append(&quot;in &quot;).append(elapsedTime).append(&quot; ms&quot;);</span><br><span class="line">            logger.info(stringBuilder.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>SimpleProducer.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.producer;</span><br><span class="line"></span><br><span class="line">import com.cxy.kafka.common.MessageEntity;</span><br><span class="line">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line">import org.springframework.kafka.support.SendResult;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.concurrent.ListenableFuture;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class SimpleProducer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;kafkaTemplate&quot;)</span><br><span class="line">    private KafkaTemplate&lt;String, MessageEntity&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    public void send(String topic, MessageEntity messageEntity)&#123;</span><br><span class="line">        kafkaTemplate.send(topic,messageEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void send(String topic, String key, MessageEntity messageEntity)&#123;</span><br><span class="line">        ProducerRecord&lt;String, MessageEntity&gt; record = new ProducerRecord&lt;String, MessageEntity&gt;(topic,key,messageEntity);</span><br><span class="line">        long startTime = System.currentTimeMillis();</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, MessageEntity&gt;&gt; future = kafkaTemplate.send(record);</span><br><span class="line">        future.addCallback(new ProducerCallback(startTime,key,messageEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>SimpleConsumer.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.consumer;</span><br><span class="line"></span><br><span class="line">import com.cxy.kafka.common.MessageEntity;</span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class SimpleConsumer &#123;</span><br><span class="line">    public static final Logger logger = Logger.getLogger(SimpleConsumer.class);</span><br><span class="line"></span><br><span class="line">    private final Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @KafkaListener(topics = &quot;$&#123;kafka.topic.default&#125;&quot;,containerFactory = &quot;kafkaListenerContainerFactory&quot;)</span><br><span class="line">    public void receive(MessageEntity messageEntity)&#123;</span><br><span class="line">        logger.info(gson.toJson(messageEntity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>ProducerController.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.kafka.controller;</span><br><span class="line"></span><br><span class="line">import com.cxy.kafka.common.ErrorCode;</span><br><span class="line">import com.cxy.kafka.common.MessageEntity;</span><br><span class="line">import com.cxy.kafka.common.Response;</span><br><span class="line">import com.cxy.kafka.producer.SimpleProducer;</span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Auther: cxy</span><br><span class="line"> * @Date: 2019/4/9</span><br><span class="line"> * @Description:</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/kafka&quot;)</span><br><span class="line">public class ProducerController &#123;</span><br><span class="line">    public static final Logger logger = Logger.getLogger(ProducerController.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SimpleProducer simpleProducer;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;kafka.topic.default&#125;&quot;)</span><br><span class="line">    private String topic;</span><br><span class="line"></span><br><span class="line">    private Gson gson = new Gson();</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value=&quot;/hello&quot;,method = RequestMethod.GET, produces = &#123;&quot;application/json&quot;&#125;)</span><br><span class="line">    public Response sendKafka()&#123;</span><br><span class="line">        return new Response(ErrorCode.SUCCESS,&quot;SUCCESS&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value=&quot;/send&quot;,method = RequestMethod.POST, produces = &#123;&quot;application/json&quot;&#125;)</span><br><span class="line">    public Response sendKafka(@RequestBody MessageEntity messageEntity)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            logger.info(&quot;kafka消息:&#123;&#125;&quot;+gson.toJson(messageEntity));</span><br><span class="line">            simpleProducer.send(topic,&quot;key&quot;,messageEntity);</span><br><span class="line">            logger.info(&quot;发送kafka成功！&quot;);</span><br><span class="line">            return new Response(ErrorCode.SUCCESS,&quot;发送kafka成功！&quot;);</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            logger.error(&quot;发送kafka失败！&quot;,e);</span><br><span class="line">            return new Response(ErrorCode.EXCEPTION,&quot;发送kafka失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>启动</code><br>启动<code>KafkaApplication.java</code>。(必须打开zookeeper和kafka)<br><code>测试</code><br>我这边用的是<code>Restlet Client</code>插件，你们也可以根据自己喜好选择测试工具</p><ul><li>先测试下<code>http://localhost:8080/kafka/hello</code><br><img src="https://upload-images.jianshu.io/upload_images/14481291-4589209e64c2837c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hello"></li><li>测试<code>http://localhost:8080/kafka/send</code><br><img src="https://upload-images.jianshu.io/upload_images/14481291-83da8ee4d338b801.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="send"><br>发送kafka消息成功，去看下控制台，成功接收到kafka消息<br><img src="https://upload-images.jianshu.io/upload_images/14481291-69e302d01c8bea76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="success"><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><a href="https://github.com/nullcxy/kafka_learning" target="_blank" rel="noopener">源代码</a><h2 id="Kafka高级特性——消息事物"><a href="#Kafka高级特性——消息事物" class="headerlink" title="Kafka高级特性——消息事物"></a>Kafka高级特性——消息事物</h2><h3 id="为什么要支持事物"><a href="#为什么要支持事物" class="headerlink" title="为什么要支持事物"></a>为什么要支持事物</h3></li><li>满足“读取-处理-写入”模式</li><li>流处理需求不断增强</li><li>不准确的数据处理的容忍度<h3 id="数据传输的事物定义"><a href="#数据传输的事物定义" class="headerlink" title="数据传输的事物定义"></a>数据传输的事物定义</h3></li><li>最多一次：消息不会被重复发送，最多被传输一次，但也有可能一次都不传输</li><li>最少一次：消息不会被漏发送，最少被传输一次，但也有可能被重复传输</li><li>精确的一次（Exactly once）：不会被漏发送也不会被重复发送，每个消息都被传输一次而且仅仅被传输一次，这是大家所期望的<h3 id="事物保证"><a href="#事物保证" class="headerlink" title="事物保证"></a>事物保证</h3></li><li>内部重试问题：Procedure幂等处理</li><li>多分区原子写入<br><img src="https://upload-images.jianshu.io/upload_images/14481291-0dfd76c38774abb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多分区原子写入"><h3 id="事物保证-避免僵尸实例"><a href="#事物保证-避免僵尸实例" class="headerlink" title="事物保证-避免僵尸实例"></a>事物保证-避免僵尸实例</h3></li><li>每个事物Producer分配一个transactional.id，在进程重新启动时能识别相同的Producer实例</li><li>Kafka增加了一个与transactional.id相关的epoch，存储每个transactional.id元数据</li><li>一旦epoch被触发，任何具有相同transactional.id和更旧的epoch的Producer被视为僵尸，Kafka会拒绝来自这些Procedure的后续事务性写入<h2 id="Kafka高级特性——零拷贝"><a href="#Kafka高级特性——零拷贝" class="headerlink" title="Kafka高级特性——零拷贝"></a>Kafka高级特性——零拷贝</h2><h3 id="零拷贝简介"><a href="#零拷贝简介" class="headerlink" title="零拷贝简介"></a>零拷贝简介</h3></li><li>网络传输持久性日志块</li><li>Java Nio channel.transforTo()方法</li><li>Linux sendfile系统调用<h3 id="文件传输到网络的公共数据路径"><a href="#文件传输到网络的公共数据路径" class="headerlink" title="文件传输到网络的公共数据路径"></a>文件传输到网络的公共数据路径</h3></li><li>操作系统将数据从磁盘读入到内核空间的页缓存</li><li>应用程序将数据从内核空间读入到用户空间缓存中</li><li>应用程序将数据写回到内核空间到socket缓存中</li><li>操作系统将数据从socket缓存中复制到网卡缓冲区，以便将数据经网络发出<h3 id="零拷贝路径"><a href="#零拷贝路径" class="headerlink" title="零拷贝路径"></a>零拷贝路径</h3></li><li>操作系统将数据从磁盘读入到内核空间的页缓存</li><li>将数据的位置和长度的信息的描述符增加至内核空间（socket缓冲区）</li><li>操作系统将数据从内核复制到网卡缓冲区，以便将数据经网络发出<br>零拷贝是指内核空间和用户空间的交互的拷贝次数为零<br><img src="https://upload-images.jianshu.io/upload_images/14481291-5aa06fd2b38f2bde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件传输到网络的公共数据路径演变"></li></ul>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下如何查看哪些进程占用的CPU内存资源最多</title>
      <link href="/2019/10/03/study15/"/>
      <url>/2019/10/03/study15/</url>
      
        <content type="html"><![CDATA[<p>linux下获取占用CPU资源最多的10个进程，可以使用如下命令组合：</p><p>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head</p><a id="more"></a><p>linux下获取占用内存资源最多的10个进程，可以使用如下命令组合：</p><p>ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo主题更改以及小功能的添加</title>
      <link href="/2018/11/05/study14/"/>
      <url>/2018/11/05/study14/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前搭建的博客基本功能已经实现了，现在就折腾着好好维护一下<a href="https://nullcxy.github.io/" target="_blank" rel="noopener">我的博客</a>了，于是参考着别人的博客添加一些小功能，并且整理了下来。</p><a id="more"></a><p>新搭建的博客的默认主题都是<code>landscape</code>，我的主题是基于<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="noopener"><code>yelee</code></a>风格的，作者也是在<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>的基础上进行的修改。</p><p>具体的使用可以参考<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">官方文档</a></p><p>首先给大家介绍下添加的功能吧</p><h1 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git</span><br></pre></td></tr></table></figure><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>打开项目目录下的_config.yml文件</p><p>主题更改，注意的是在yelee前面有个空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: yelee</span><br></pre></td></tr></table></figure><h1 id="语言更换"><a href="#语言更换" class="headerlink" title="语言更换"></a>语言更换</h1><p>打开项目目录下的_config.yml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><p>目前可用语言:</p><table><thead><tr><th><strong>en</strong></th><th><strong>English</strong></th><th><strong>英语</strong></th></tr></thead><tbody><tr><td><strong>zh-Hans</strong></td><td><strong>Chinese (Simplified)</strong></td><td><strong>大陆简体</strong></td></tr><tr><td><strong>zh-Hant-HK</strong></td><td><strong>Chinese (Traditional)</strong></td><td><strong>港澳繁體</strong></td></tr><tr><td><strong>zh-Hant-TW</strong></td><td><strong>Chinese (Traditional)</strong></td><td><strong>台灣正體</strong></td></tr></tbody></table><h1 id="个人头像"><a href="#个人头像" class="headerlink" title="个人头像"></a>个人头像</h1><p>默认头像存储于 <code>yelee/source/img/avatar.png</code></p><p>配置中对应填写 <code>/img/avatar.png</code>，可替换图片或指定新地址</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span> <span class="string">/img/avatar.png</span></span><br></pre></td></tr></table></figure><h1 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h1><p>目前主题可使用两种方式在首页显示文章摘要而不是全文。</p><h2 id="方法一-lt-more-gt"><a href="#方法一-lt-more-gt" class="headerlink" title="方法一: &lt;!-- more --&gt;"></a>方法一: <code>&lt;!-- more --&gt;</code></h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2015-12-03 00:00:00</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&lt;Excerpt in index | 首页摘要&gt; </span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">&lt;The rest of contents | 余下全文&gt;</span><br></pre></td></tr></table></figure><blockquote><p> <code>&lt;!-- more --&gt;</code> 之前最好不要有空格等字符；</p></blockquote><h2 id="方法二-description-in-Front-matter"><a href="#方法二-description-in-Front-matter" class="headerlink" title="方法二: description in Front-matter"></a>方法二: <code>description</code> in <a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">Front-matter</a></h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2015-12-03 00:00:00</span><br><span class="line">description: "Welcome to Hexo! This is your very first post."</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&lt;Contents&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>description</code> 添加的摘要只能为纯文本；</p></blockquote><blockquote><p><code>description</code> 中的内容加引号，可以避免一些程序错误，例如当内容里包含英文冒号时。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-f9c5ce9f0e47e1d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="摘要"></p><h1 id="主菜单"><a href="#主菜单" class="headerlink" title="主菜单"></a>主菜单</h1><p>按下面格式添加边栏菜单，菜单前的 <code>#</code> 表示注释掉该行，即隐藏掉该条目</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">所有文章:</span> <span class="string">/archives/</span></span><br><span class="line">  <span class="comment">#随笔: /tags/随笔</span></span><br><span class="line">  <span class="string">标签云:</span> <span class="string">/tags/</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure><h1 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h1><p>使用 Hexo 命令新建一个名为 <code>tags</code> 的页面即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><blockquote><p>该页面标题可以在文件 <code>\hexo\source\tags\index.md</code> 中修改</p></blockquote><blockquote><p>同一篇文章设置多个分类后的问题 <a href="https://github.com/MOxFIVE/hexo-theme-yelee/issues/4" target="_blank" rel="noopener">issue#4</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-e336f276dfd1b717.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标签云"></p><h1 id="关于我的页面"><a href="#关于我的页面" class="headerlink" title="关于我的页面"></a>关于我的页面</h1><p>使用 Hexo 命令新建一个名为 <code>about</code> 的页面即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><blockquote><p>该页面内容在文件 <code>\hexo\source\about\index.md</code> 中修改</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-06aaf516cf0db5d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关于我"></p><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p>使用搜索需先安装对应插件，用于生成索引数据</p><blockquote><p>插件主页: <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></p></blockquote><blockquote><p><code>#on: true</code> 改为 <code>on: true</code>即为启用搜索</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span> </span><br><span class="line">  <span class="comment">#on: true</span></span><br><span class="line"><span class="attr">  onload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>onload: true</code> : 索引数据 <code>search.xml</code> 随页面一起加载 <code>[效率优先]</code></p><p><code>onload: false</code> : 当激活搜索框时再下载索引数据 `[按需加载]</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-97173f269807d0ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="搜索"></p><h1 id="站点小图标"><a href="#站点小图标" class="headerlink" title="站点小图标"></a>站点小图标</h1><p>若将图标存储于 <code>yelee/source/favicon.png</code></p><p>则配置中对应填写 <code>/favicon.png</code>，另外填网络图片的地址也可</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">favicon: /favicon.png</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-817f760fd35579aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图标"></p><h1 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h1><p>去掉设置前的 <code>#</code> 再填写链接即可</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subnav:</span><br><span class="line">  Email: &quot;mailto:1287530995@qq.com&quot;</span><br><span class="line">  #新浪微博: &quot;sina weibo&quot;</span><br><span class="line">  GitHub: https://github.com/nullcxy</span><br><span class="line">  #V2EX: &quot;#&quot;</span><br><span class="line">  #RSS: &quot;/atom.xml&quot;</span><br></pre></td></tr></table></figure><blockquote><p>设置 Email 时保留 <code>mailto:</code> 可考虑加密邮件地址 <a href="http://ctrlq.org/encode/" target="_blank" rel="noopener">http://ctrlq.org/encode/</a></p></blockquote><blockquote><p>使用 RSS 需先安装对应插件 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">https://github.com/hexojs/hexo-generator-feed</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-eac11f515f357d31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="社交"></p><h1 id="网站成立年份"><a href="#网站成立年份" class="headerlink" title="网站成立年份"></a>网站成立年份</h1><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">since: 2016</span><br></pre></td></tr></table></figure><blockquote><p>默认为 <code>2016</code>，若填入年份小于当前年份，则显示为 <code>2015-2016</code> 类似的格式</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14481291-45ba910c95cac806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="年份"></p><h1 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h1><p>背景图文件所在路径:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/yelee/source/background/</span><br></pre></td></tr></table></figure><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">background_image:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>默认值为5，可按需修改</li><li>“5”: 设置<code>/yelee/source/background/</code>文件夹中 <code>bg-1.jpg</code> 到 <code>bg-5.jpg</code> 这5张图片为背景</li><li>“0”: 取消网页背景图，使用淳朴的灰白主题</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14481291-4720360d19268187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="背景"></p><h1 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h1><p>配置中启用目录</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  on:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>指定文章中关闭目录 <code>toc: false</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2015-08-19 00:00:00</span><br><span class="line">toc: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-773d907958105cc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录"></p><h1 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h1><p>配置中启用目录</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>指定文章中关闭目录 <code>original: false</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-08</span><span class="bullet">-19</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">original:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>原始链接设置</p><p>修改 <a href="https://hexo.io/zh-cn/docs/configuration.html#%E7%BD%91%E5%9D%80" target="_blank" rel="noopener">站点配置</a> 文件中 <code>url</code> 的值为你的网站域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: http://MOxFIVE.xyz</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-91bfaa6cf1e1b7fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版权"></p><h1 id="左边主菜单鸟屋"><a href="#左边主菜单鸟屋" class="headerlink" title="左边主菜单鸟屋"></a>左边主菜单鸟屋</h1><p><code>themes/yelee/_config.yml</code> 背景参数:</p><h2 id="左边栏鸟屋"><a href="#左边栏鸟屋" class="headerlink" title="左边栏鸟屋"></a>左边栏鸟屋</h2><p><img src="http://moxfive.coding.me/yelee/src/birdhouse.png" alt="边栏鸟屋"></p><h2 id="关闭鸟屋"><a href="#关闭鸟屋" class="headerlink" title="关闭鸟屋"></a>关闭鸟屋</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 边栏多标签切换</span></span><br><span class="line"><span class="attr">tagcloud:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 编辑友链</span></span><br><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">  Hexo:</span> <span class="attr">https://hexo.io</span></span><br><span class="line"><span class="attr">  GitHub:</span> <span class="attr">https://pages.github.com/</span></span><br><span class="line"><span class="attr">  MOxFIVE:</span> <span class="attr">http://moxfive.xyz/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 关闭友链</span></span><br><span class="line"><span class="attr">friends:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 是否开启“关于我”。</span><br><span class="line">aboutme: 专注于前端</span><br><span class="line"></span><br><span class="line"># 关闭“关于我”</span><br><span class="line">aboutme: false</span><br></pre></td></tr></table></figure><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><h2 id="来必力评论"><a href="#来必力评论" class="headerlink" title="来必力评论"></a>来必力评论</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>yelee原生是支持Disqus、多说和有言的，可以参考<a href="http://moxfive.coding.me/yelee/2.Basic-Usage/comment.html" target="_blank" rel="noopener">官网-评论系统</a></p><p>但是多说已经关闭，有言支持又不友好，又发现Disqus在手机上展示不出来，发现还需要翻墙，那实在对用户太不友好了，于是我选择使用<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>评论系统</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-c505f102fffea468.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="来必力"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>注册后可以查看数据分析</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-dca002236b3c0e98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据分析"></p><p>代码管理，我们需要用到这个data-uid</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-c7c732b9cc13d03f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><h3 id="添加data-uid"><a href="#添加data-uid" class="headerlink" title="添加data-uid"></a>添加data-uid</h3><p>打开<code>theme/yelee/_config.yml</code>，添加配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">livere:</span><br><span class="line">   on: true</span><br><span class="line">   livere_uid: Your uid</span><br></pre></td></tr></table></figure><h3 id="创建ejs文件"><a href="#创建ejs文件" class="headerlink" title="创建ejs文件"></a>创建ejs文件</h3><p>在<code>themes/yelee/layout/_partial/comments</code>文件夹创建<code>livere.ejs</code>文件，将代码拷贝进去，将你注册后的代码拷贝到<section></section>里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;section class=&quot;livere&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">    &lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">    &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;Your uid&quot;&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   (function(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">       j.async = true;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">       &#125;)(document, &apos;script&apos;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- City版安装代码已完成 --&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><h3 id="追加逻辑判断"><a href="#追加逻辑判断" class="headerlink" title="追加逻辑判断"></a>追加逻辑判断</h3><p>打开<code>themes/yelee/layout/_partial/article.ejs</code>，在下图位置插入下面的逻辑判断代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">else if (theme.livere.on) &#123; %&gt;</span><br><span class="line">&lt;%- partial(&apos;comments/livere&apos;) %&gt;</span><br><span class="line">&lt;% &#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-0cf6d910636b8e4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="判断"></p><p>如此，就大功告成，可以进行留言了，看下效果：</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-1e02e9243ba6a62b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="评论"></p><h1 id="文章字数统计以及阅读时长"><a href="#文章字数统计以及阅读时长" class="headerlink" title="文章字数统计以及阅读时长"></a>文章字数统计以及阅读时长</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>next主题是已经集成这个功能的，但是yelee就需要我们自己配置了，可以看下官网对<a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>的介绍</p><h2 id="集成-1"><a href="#集成-1" class="headerlink" title="集成"></a>集成</h2><h3 id="安装hexo-wordcount"><a href="#安装hexo-wordcount" class="headerlink" title="安装hexo-wordcount"></a>安装hexo-wordcount</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p>在<code>yelee/layout/_partial/post/word.ejs</code>下创建<code>word.ejs</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;margin-top:10px;&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-time&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-item-text&quot;&gt;  字数统计: &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;post-count&quot;&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span class=&quot;post-time&quot;&gt;</span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-hourglass-half&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-item-text&quot;&gt;  阅读时长: &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;post-count&quot;&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后添加逻辑判断</p><p>打开 <code>themes/yelee/layout/_partial/article.ejs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(theme.word_count &amp;&amp; !post.no_word_count)&#123; %&gt;</span><br><span class="line">&lt;%- partial(&apos;post/word&apos;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在下图位置添加</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-43e8db051ad01c72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="判断"></p><p><code>word_count</code> 是主题<code>_config.yml</code>中配置是否需要添加字数统计功能控制 flag，</p><p><code>no_word_count</code>即配置文章是否需要显示字数统计的功能。</p><p>看一下效果吧</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-e01f42d6ccbd8656.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="统计"></p><h1 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><p>对于一名<code>Android</code>开发者来讲，<code>网易云音乐</code>是必不可少的功能，那博客也要添加这个功能咯。    </p><h2 id="集成-2"><a href="#集成-2" class="headerlink" title="集成"></a>集成</h2><p><code>MarkDown</code> 是支持 <code>h5</code> 代码的，所以集成过来很简单，打开<a href="https://link.jianshu.com/?t=https%3A%2F%2Fmusic.163.com" target="_blank" rel="noopener">网易云音乐</a>，搜索你想要的音乐</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-fb677b909c0c7a3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网易云"></p><p>点击对应的<code>生成外链播放器</code>，当然前提是要有版权的，很多音乐还是没有版权的，可以设置尺寸，是否自动播放，最后拷贝对应的代码，拷贝到你想要放置的位置即可。</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-2bc8d19e4e4e8009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iframe"></p><p>看一下效果吧</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-37f0442524b5e82a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="音乐"></p><h1 id="鼠标点击桃心效果"><a href="#鼠标点击桃心效果" class="headerlink" title="鼠标点击桃心效果"></a>鼠标点击桃心效果</h1><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><p>如果鼠标点击的时候出现特效，那一定会使整个博客的颜值提升一大截</p><h2 id="集成-3"><a href="#集成-3" class="headerlink" title="集成"></a>集成</h2><h3 id="拷贝需要的文件"><a href="#拷贝需要的文件" class="headerlink" title="拷贝需要的文件"></a>拷贝需要的文件</h3><p>进入<a href="https://github.com/nullcxy/MyBlog" target="_blank" rel="noopener">我的备份</a>，拷贝需要的文件</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-3ba685938e67ceb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="桃心"></p><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>打开<code>themes/yelee/layout/_partial/after-footer.ejs</code>文件，添加刚刚添加文件的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/resources/float.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/resources/love.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; color=0,104,183 opacity=1 zindex=-1 count=50 src=&quot;/resources/particle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/resources/typewriter.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-8cfdd6ffdaf30d35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置"></p><p>点击页面查看一下效果</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-e212e13126f1ba0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="桃心效果"></p><h1 id="添加可爱的萌妹子或者萌宠"><a href="#添加可爱的萌妹子或者萌宠" class="headerlink" title="添加可爱的萌妹子或者萌宠"></a>添加可爱的萌妹子或者萌宠</h1><h2 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h2><p>如果在页面上添加个萌宠或者萌妹纸，那是不是很卡哇伊呢。大家可以查看<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">源码</a>来挑选自己喜欢的模型。</p><h2 id="集成-4"><a href="#集成-4" class="headerlink" title="集成"></a>集成</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点的 <code>_config.yml</code> 下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-miku</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure><p>其中，live2d.model.use使用来配置对应的萌宠模型，我这边是live2d-widget-model-miku</p><p>看一下效果吧</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-db32a29337cd3ae3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="萌妹"></p><h1 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h1><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><p>可以实时展示自己的博客的运行时间，还是蛮有成就感的。</p><h2 id="集成-5"><a href="#集成-5" class="headerlink" title="集成"></a>集成</h2><p>在 <code>hexo/themes/yelee/layout</code> 文件夹下找到你的 <code>footer</code> 文件，即脚布局文件，在对应的位置添加一下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date(); </span><br><span class="line">    function createtime() &#123; </span><br><span class="line">        var grt= new Date(&quot;02/14/2018 12:49:00&quot;);//此处修改你的建站时间或者网站上线时间 </span><br><span class="line">        now.setTime(now.getTime()+250); </span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); </span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); </span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum); </span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); </span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125; </span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;; </span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>运行效果</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-2f364afb8d132507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行时长"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo+github搭建博客</title>
      <link href="/2018/11/01/study13/"/>
      <url>/2018/11/01/study13/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不管简书、掘金或者其他网站，总会感觉不是自己的地盘，所以我就想自己搭建个博客，可以在自己的一亩三分地上耕耘收获。不仅如此，以往我写的博客都会到处乱放，比如一会放到掘金，一会放到简书等等，不利于管理，搭建一个自己的博客也更方便了个人的整理分类。目前来说，<code>hexo</code>还是挺主流的一种搭建博客的方式，主题也很多，可以供各位选择。先给大家看下<a href="https://nullcxy.github.io/" target="_blank" rel="noopener">我的博客</a>吧</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/14481291-798f11882f452a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="myblog"></p><h1 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。<code>Hexo</code> 使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>我之前有写过安装Git的教程，可点击<a href="https://www.jianshu.com/p/9f13b0b634e0" target="_blank" rel="noopener">查看</a>，在这里我就不再赘述了。</p><h1 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h1><p>Hexo是基于nodeJS环境的静态博客，里面的npm工具真的很有用啊，不管之后的安装hexo、统计阅读时长、博文字数或者添加小萌妹都需要使用到npm工具，所以还是老老实实的装上吧~</p><ol><li>基本上都是64位的，直接给上64位Windows的下载地址：<a href="https://nodejs.org/dist/v10.13.0/node-v10.13.0-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v10.13.0/node-v10.13.0-x64.msi</a><br>或者自己自行到官网下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li>下载好msi文件后，双击打开安装，反正一路next，安装路径可以根据自己需要更改。</li><li>安装完之后打开cmd窗口（win+r），查看nodejs安装的版本。<br>输入以下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14481291-9514dc84d5a4d5f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="node版本"><br>安装成功！</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>Hexo安装就只需要npm工具就行了<br><code>npm</code>可以设置<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>，来提高下载速度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><ol><li>创建一个空的文件夹</li><li>打开Git Bash（安装完Git随处右击就有“Git Bash here”），cd到文件夹，也可以直接在文件夹内右击“Git Bash here”</li><li>安装Hexo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14481291-437de310cb28a834.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo安装"></p><ol start="3"><li>查看hexo版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14481291-d0f9cdd82785f846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看版本"></p><ol start="4"><li>初始化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14481291-c11a76a77811a830.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化"><br>看一下文件夹初始化后内容<br><img src="https://upload-images.jianshu.io/upload_images/14481291-9ebc8a6b59b0e4db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件夹"><br>解析一下各文件：</p><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：整个博客的配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><ol start="5"><li>查看本地博客<br>启动本地服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li></ol><p>访问本地浏览器：<code>http://localhost:4000</code><br><img src="https://upload-images.jianshu.io/upload_images/14481291-4599f31f9f10e036.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地博客"></p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><ol><li>创建.md文件，目录：/source/_posts<br><img src="https://upload-images.jianshu.io/upload_images/14481291-e424d486cd56c88b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一篇博客"></li><li>博文的属性<br><img src="https://upload-images.jianshu.io/upload_images/14481291-64a8cf60df680cff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="属性"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo-blog</span><br><span class="line">date: 2018-11-03 16:07:32</span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><p>这里要说一下 tags 这个属性，如果需要配置多个有两种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [tag1, tag2, tag3]</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line">  - tag3</span><br></pre></td></tr></table></figure></p><p>注：Hexo 是支持 Markdown 的所有功能的，所以，最好去学习一下 <a href="https://www.jianshu.com/p/05cc479f603e" target="_blank" rel="noopener">Markdown</a> 的语法规范。</p><h1 id="搭桥到GitHub"><a href="#搭桥到GitHub" class="headerlink" title="搭桥到GitHub"></a>搭桥到GitHub</h1><ol><li>没有GitHub账号创建账号，有的话就看下一步</li><li>创建新的仓库repository<br><img src="https://upload-images.jianshu.io/upload_images/14481291-639a33035d661488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新仓库"><br>其中Repository name必须是你的github名称，不然后续会报404错误。<br><img src="https://upload-images.jianshu.io/upload_images/14481291-f7e731300c5063cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="create"></li><li>回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）</li><li>创建SSH<br>第3，4步我之前的<a href="https://www.jianshu.com/p/9157928c7e17" target="_blank" rel="noopener">博文</a>有教程，这里就不再详细描述操作过程了，你也可以找度娘搜索。</li><li>修改_config.yml文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yourGitHubName/yourGitHubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><p>注意：冒号之后都是有一个半角空格的，没有的话会出错！</p><ol start="6"><li><p>安装hexo-deployer-git自动部署发布工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git  --save</span><br></pre></td></tr></table></figure></li><li><p>发布到Github，命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></li></ol><p>第一次上传是需要验证GitHub账号的<br><img src="https://upload-images.jianshu.io/upload_images/14481291-1fd0c4377291d3e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="验证"><br>当出现下图字样表示发布成功<br><img src="https://upload-images.jianshu.io/upload_images/14481291-3389338ed20f60fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功"></p><ol start="8"><li>访问：<a href="http://yourGitHubName.github.io" target="_blank" rel="noopener">http://yourGitHubName.github.io</a><br>注：感觉GitBash中东西太多的时候可以输入clear来清空命令。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>String，StringBuilder，StringBuffer的区别</title>
      <link href="/2018/10/31/study10/"/>
      <url>/2018/10/31/study10/</url>
      
        <content type="html"><![CDATA[<h2 id="可变性"><a href="#可变性" class="headerlink" title="可变性"></a>可变性</h2><p>首先我们看下String的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/** The value is used for character storage. */ </span><br><span class="line">private final char value[];</span><br></pre></td></tr></table></figure><a id="more"></a><p>由此可以看出，String类中使用final关键字字符数组来保存字符串，所以是不可变的。  </p><p>注：在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）</p><p>　　1、当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。</p><p>　　2、final修饰的方法不能被重写。</p><p>　　3、当final修饰一个基本数据类型时，表示该基本数据类型的值一旦在初始化后便不能发生变化；如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化的。</p><p>再来看下StringBuilder，StringBuffer的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public final class StringBuilder </span><br><span class="line">          extends AbstractStringBuilder </span><br><span class="line">          implements java.io.Serializable, CharSequence </span><br><span class="line">&#123; </span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public final class StringBuffer </span><br><span class="line">          extends AbstractStringBuilder </span><br><span class="line">          implements java.io.Serializable, CharSequence </span><br><span class="line">&#123; </span><br><span class="line">      ... </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>由源码可以看出，StringBuilder、StringBuffer都继承自AbstractStringBuilder类，我们接下来再看下AbstractStringBuilder类的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * The value is used for character storage. </span><br><span class="line">   */</span><br><span class="line">  char[] value;</span><br></pre></td></tr></table></figure><p>由源码可以看出，StringBuilder、StringBuffer在AbstractStringBuilder中也是使用字符数组保存字符串的，但是这两种都是可变的。</p><h2 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h2><p>String中的对象是不可变的，也可以理解为常量，线程安全的。</p><p>接下来我们继续看下StringBuffer源码，我在这随机截取了源码中的一些方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">   * @since      1.2</span><br><span class="line">   */</span><br><span class="line">  @Override</span><br><span class="line">  public synchronized String substring(int start, int end) &#123;</span><br><span class="line">      return super.substring(start, end);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> /**     </span><br><span class="line">    * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125;      </span><br><span class="line">    */     </span><br><span class="line">   @Override     </span><br><span class="line">   public synchronized StringBuffer insert(int offset, Object obj) &#123;                             </span><br><span class="line">       toStringCache = null; </span><br><span class="line">       super.insert(offset, String.valueOf(obj));         </span><br><span class="line">       return this;     </span><br><span class="line">    &#125;      </span><br><span class="line"></span><br><span class="line"> /**      </span><br><span class="line">   * @since      1.4      </span><br><span class="line">   */     </span><br><span class="line">   @Override     </span><br><span class="line">   public int indexOf(String str) &#123;         </span><br><span class="line">       // Note, synchronization achieved via invocations of other                          </span><br><span class="line">       StringBuffer methods   </span><br><span class="line">       return super.indexOf(str);     </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由源代码可以看出StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。</p><p>再来看下StringBuilder源码中的一些方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public StringBuilder append(Object obj) &#123;</span><br><span class="line">    return append(String.valueOf(obj));    </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line"> */</span><br><span class="line">@Override      </span><br><span class="line"> public StringBuilder insert(int index, char[] str, int offset, int len)  &#123; </span><br><span class="line">     super.insert(index, str, offset, len); </span><br><span class="line">     return this; </span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line">/** </span><br><span class="line">  * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125; </span><br><span class="line">  */</span><br><span class="line">  @Override </span><br><span class="line">  public StringBuilder replace(int start, int end, String str) &#123; </span><br><span class="line">      super.replace(start, end, str); </span><br><span class="line">      return this; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>由源码可以看出，StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。</p><p>StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。</p><p>相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><ol><li><p>操作少量的数据 ： String</p></li><li><p>单线程操作字符串缓冲区下操作大量数据 ： StringBuilder</p></li><li><p>多线程操作字符串缓冲区下操作大量数据 ： StringBuffer</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记-EDAS介绍</title>
      <link href="/2018/10/27/study7/"/>
      <url>/2018/10/27/study7/</url>
      
        <content type="html"><![CDATA[<h3 id="HSF："><a href="#HSF：" class="headerlink" title="HSF："></a>HSF：</h3><p>HSF为EDAS应用开发提供了一套分布式服务框架的解决方案，从应用层面提供统一的服务发布/调用支持，让开发者很容易的开发分布式的应用，不用考虑分布领域中的各种技术细节（远程通讯、性能消耗、调用的透明化、同步/异步调用方式的实现等等问题）</p><a id="more"></a><h3 id="容器："><a href="#容器：" class="headerlink" title="容器："></a>容器：</h3><p>　　Ali-tomcat:</p><p>　　　　与Apache Tomcat完全兼容的WebApp容器</p><p>　　　　引入Pandora容器的类隔离机制解决EDAS依赖包与应用包冲突的问题</p><p>　　Pandora: </p><p>　　　　能够隔离EADS与应用之间的jar包依赖，保证两者互不受影响</p><h3 id="配置中心："><a href="#配置中心：" class="headerlink" title="配置中心："></a>配置中心：</h3><h4 id="Address-Server："><a href="#Address-Server：" class="headerlink" title="Address-Server："></a>Address-Server：</h4><p>地址中心，寻址Config-Server和Diamond-Server</p><h4 id="Diamond-Server："><a href="#Diamond-Server：" class="headerlink" title="Diamond-Server："></a>Diamond-Server：</h4><p>动态配置变更推送</p><h5 id="优势特性："><a href="#优势特性：" class="headerlink" title="优势特性："></a>优势特性：</h5><ul><li><p>高效性</p><p>基于推拉结合的方式，实现配置动态变更实时推送</p></li><li><p>可靠性</p><p>通过客户端、服务端多级容灾，实现系统的高可用</p></li><li><p>易扩展</p><p>配置数据在集群单节点上全量分布，实现节点无状态</p></li></ul><h4 id="Config-Server"><a href="#Config-Server" class="headerlink" title="　Config-Server:　　"></a>　Config-Server:　　</h4><p>　　　用于HSF服务数据的发布订阅　　　</p><p>　　　优势特性：</p><h5 id="无Master"><a href="#无Master" class="headerlink" title="　　  无Master"></a>　　  无Master</h5><p>ConfigServer基于无Master架构不存在单点问题</p><h5 id="自动聚合"><a href="#自动聚合" class="headerlink" title="　　　自动聚合"></a>　　　自动聚合</h5><p>ConfigServer支持数据的自动聚合</p><h5 id="实时"><a href="#实时" class="headerlink" title="　　　实时"></a>　　　实时</h5><p>服务端在订阅关系变化时，会主动推送配置数据到客户端</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> EDAS </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Method breakpoints may dramatically slow down debugging情况解决</title>
      <link href="/2018/10/10/problem0/"/>
      <url>/2018/10/10/problem0/</url>
      
        <content type="html"><![CDATA[<p>首先给大家看张图</p><p><img src="http://upload-images.jianshu.io/upload_images/14481291-e771d3e140a7f072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><a id="more"></a><p>这是我最近degubber启动项目时遇到的问题。</p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>根据语义，断点打在了方法上面。</p><h3 id="引起的问题："><a href="#引起的问题：" class="headerlink" title="引起的问题："></a>引起的问题：</h3><p>导致项目启动变慢，IDEA调试会越来越慢。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>Ctrl+shift+F8打开Breakpoints面板，如图</p><p><img src="http://upload-images.jianshu.io/upload_images/14481291-94c98d7cd1c962a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>由此，我们可以清晰看到有一个断点在方法上，我们只要将方法前面的勾去掉就行了</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MYSQL limit,offset 区别</title>
      <link href="/2018/10/04/study4/"/>
      <url>/2018/10/04/study4/</url>
      
        <content type="html"><![CDATA[<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><p>首先看下表</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-7330db7d31a2d3ea.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="user表"></p><a id="more"></a><h1 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h1><ol><li>执行下面SQL</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">`user`</span><br><span class="line">WHERE</span><br><span class="line">sex = 1</span><br></pre></td></tr></table></figure><p>结果<br><img src="https://upload-images.jianshu.io/upload_images/14481291-b602b5ec694254f3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果0"></p><ol start="2"><li>再来看下下面的SQL</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">`user`</span><br><span class="line">WHERE</span><br><span class="line">sex = 1</span><br><span class="line">LIMIT 2,</span><br><span class="line"> 2</span><br></pre></td></tr></table></figure><p>结果<br><img src="https://upload-images.jianshu.io/upload_images/14481291-b8fa2b408cff271a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果1"><br>由此可以看出，limit后面是从第2条开始读，读取2条信息。<br>最后看下下面的SQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">`user`</span><br><span class="line">WHERE</span><br><span class="line">sex = 1</span><br><span class="line">LIMIT 2</span><br><span class="line"> OFFSET 1</span><br></pre></td></tr></table></figure></p><p>结果<br><img src="https://upload-images.jianshu.io/upload_images/14481291-981149e14541943a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果2"><br>由此可知，limit后面跟的是2条数据，offset后面是从第1条开始读取</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>freemarker判断对象是否为空</title>
      <link href="/2018/10/01/problem3/"/>
      <url>/2018/10/01/problem3/</url>
      
        <content type="html"><![CDATA[<p>一、freemarker中显示某对象使用${object}</p><p>例：</p><p><code>&lt;input class=&quot;easyui-textbox&quot; id=&quot;&quot; value=&quot;${TOPIC_NAME}&quot;&gt;</code></p><a id="more"></a><p>二、如果对象出现null值，freemarker就会报错，可以通过判断来对象是否为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;#if object??&gt;</span><br><span class="line">2 </span><br><span class="line">3    ......</span><br><span class="line">4 </span><br><span class="line">5     &lt;#else&gt;</span><br><span class="line">6 </span><br><span class="line">7    ......</span><br><span class="line">8 </span><br><span class="line">9 &lt;/#if&gt;</span><br></pre></td></tr></table></figure><p>也可以通过设置默认值${object!””}，如果object为null，页面就会显示”“</p><p><code>&lt;input class=&quot;easyui-textbox&quot; id=&quot;&quot; value=${TOPIC_NAME!&quot;如果TOPIC_NAME为null，显示&quot;}&gt;</code></p><p>三、如果对象导航为null，可以通过${(map.name)!”如果map为null或者name为null，显示”}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;#--加上括号，感叹号解决对象导航为空的问题--&gt;</span><br><span class="line">&lt;input class=&quot;easyui-textbox&quot; id=&quot;&quot; value=$&#123;(map.name)!&quot;map为null或者name为null&quot;&#125;&gt;</span><br></pre></td></tr></table></figure><p>四、总结</p><p>！可以解决null</p><p>！可以解决未定义的问题</p><p>！和（）可以解决对象导航的问题</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IDEA搭建和部署Maven项目</title>
      <link href="/2018/09/28/study3/"/>
      <url>/2018/09/28/study3/</url>
      
        <content type="html"><![CDATA[<p>创建Maven项目</p><a id="more"></a><ol><li>File-&gt;New-&gt;Project<br><img src="https://upload-images.jianshu.io/upload_images/14481291-b2ce9755f06fe2d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第1步"></li><li>点击Maven项目，并选择archetype-webapp，然后next<br><img src="https://upload-images.jianshu.io/upload_images/14481291-63f3cd1a32be845e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第2步"></li><li>输入 groupId 和 ArtifactId ，一个是组，一个是项目名称 ，version默认就行，然后next<br><img src="https://upload-images.jianshu.io/upload_images/14481291-f6cfeea4dcfdd197.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第3步"></li><li>选择maven的根目录、settings.xml文件和本地仓库的位置，根据个人路径配置。添加一个archetypeCatalog=internal的属性。这个参数的意义是让这个maven项目的骨架不要到远程下载而是本地获取。如果你没加这个参数，那么项目创建可能在卡在downloading maven plugins…点击Next<br><img src="https://upload-images.jianshu.io/upload_images/14481291-446ff8ba88bbf4e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第4步"></li><li>项目名，finish<br><img src="https://upload-images.jianshu.io/upload_images/14481291-f7f40ec8d4858cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第5步"></li><li>查看项目的结构<br><img src="https://upload-images.jianshu.io/upload_images/14481291-97a1b5c207e676b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目目录结构"><br>PS:新创建的Maven项目是没有resources文件夹的，可以通过以下方式添加</li></ol><ul><li>File-&gt;Project Structure<br><img src="https://upload-images.jianshu.io/upload_images/14481291-b37c9272b19b162f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="one"></li><li>打开Project Structure，选择Modules<br><img src="https://upload-images.jianshu.io/upload_images/14481291-dcf227b7f1f93b5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="two"></li><li>选择New Folder<br><img src="https://upload-images.jianshu.io/upload_images/14481291-3e0dad9cccc2e625.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="three"></li><li>输入folder name<br><img src="https://upload-images.jianshu.io/upload_images/14481291-1f3a15873d4fd5af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="four"></li><li>选择Resources文件资源类型,然后apply<br><img src="https://upload-images.jianshu.io/upload_images/14481291-fc673dd94f2c121a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="five"></li></ul><ol start="7"><li>Terminal终端输入mvn clean install，编译打包成功，显示BUILD SUCCESS字样<br><img src="https://upload-images.jianshu.io/upload_images/14481291-1f22318ff1f6b82b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打包"></li><li>打包后根目录下出现target目录<br><img src="https://upload-images.jianshu.io/upload_images/14481291-668a39b024664581.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="target"></li><li>部署到Tomcat<br><img src="https://upload-images.jianshu.io/upload_images/14481291-ed361eb5e169b42c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给项目添加Tomcat 服务器"></li><li>选择local<br><img src="https://upload-images.jianshu.io/upload_images/14481291-006e2f85e730efed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择Tomcat"></li><li>修改Name，可以不修改，选择Tomcat、jdk，以及端口。将打包好的war包部署到Tomcat，点击apply<br><img src="https://upload-images.jianshu.io/upload_images/14481291-4a087f08e541b67b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Server"><br><img src="https://upload-images.jianshu.io/upload_images/14481291-bbdea2ac31dd6db5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Deployment"></li><li>Run运行，浏览器跳出页面，输出Hello World，项目发布成功<br><img src="https://upload-images.jianshu.io/upload_images/14481291-0e9396c8e15c7209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hello World"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>上传文件至GitHub</title>
      <link href="/2018/09/22/study12/"/>
      <url>/2018/09/22/study12/</url>
      
        <content type="html"><![CDATA[<h1 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h1><p>可查看我之前写过的<a href="https://nullcxy.github.io/2018/06/21/study11/" title="Git安装" target="_blank" rel="noopener">博文</a></p><a id="more"></a><h1 id="设置SSH-key"><a href="#设置SSH-key" class="headerlink" title="设置SSH key"></a>设置<a href="https://segmentfault.com/q/1010000000118744" target="_blank" rel="noopener">SSH key</a></h1><h2 id="查看ssh-key"><a href="#查看ssh-key" class="headerlink" title="查看ssh key"></a>查看ssh key</h2><p>可以先查看一下是否已经生成过ssh key<br><img src="https://upload-images.jianshu.io/upload_images/14481291-5ccc83fa5d8420cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=".ssh key"><br>我这边显示已经生成过了，如果没有显示这三个文件，说明没有生成</p><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>生成过程中点击Enter键三次，此时在默认路径会生成.ssh文件夹，里面有如图三个文件<br><img src="https://upload-images.jianshu.io/upload_images/14481291-1531b2c93bab8639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=".ssh"></p><h2 id="查看id-rsa-pub"><a href="#查看id-rsa-pub" class="headerlink" title="查看id_rsa.pub"></a>查看id_rsa.pub</h2><p><img src="https://upload-images.jianshu.io/upload_images/14481291-64b5c63f54274828.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="id_rsa.pub"></p><h1 id="为GitHub账号配置ssh-key"><a href="#为GitHub账号配置ssh-key" class="headerlink" title="为GitHub账号配置ssh key"></a>为GitHub账号配置ssh key</h1><h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><p>点击头像，下拉框中有个Settings设置选项<br><img src="https://upload-images.jianshu.io/upload_images/14481291-ac31896ef036cf75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Settings"></p><h2 id="Personal-settings"><a href="#Personal-settings" class="headerlink" title="Personal settings"></a>Personal settings</h2><p>在Personal settings选择  SSH and GPG keys<br><img src="https://upload-images.jianshu.io/upload_images/14481291-1a47c215ee1f76ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SSH and GPG keys"></p><h2 id="New-SSH-key"><a href="#New-SSH-key" class="headerlink" title="New SSH key"></a>New SSH key</h2><p>点击New SSH key<br><img src="https://upload-images.jianshu.io/upload_images/14481291-ca4402db5b53f8e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="New SSH key"></p><h2 id="SSH-keys-Add-new"><a href="#SSH-keys-Add-new" class="headerlink" title="SSH keys/Add new"></a>SSH keys/Add new</h2><p><img src="https://upload-images.jianshu.io/upload_images/14481291-8f9f9800bc31e199.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Add new"></p><h2 id="Add后"><a href="#Add后" class="headerlink" title="Add后"></a>Add后</h2><p><img src="https://upload-images.jianshu.io/upload_images/14481291-6db142c4058ae462.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="key"></p><h1 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line"></span><br><span class="line">cd f:test</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-b2286c20f5cc462e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test"></p><h2 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-36577c6f8c82f98d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="init"><br>初始化后会出现.git文件夹，如图<br><img src="https://upload-images.jianshu.io/upload_images/14481291-acd8743e1d50a1cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=".git"><br>如果没有，是被隐藏了，工具-&gt;文件夹选项-&gt;查看，选择“显示隐藏的文件、文件夹和驱动器”</p><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>将所有文件添加到仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>提交，双引号内是提交注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;first&apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-e601b8e0cf7daeae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="commit"><br>显示已经提交一个文件</p><h1 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h1><h2 id="创建一个新的仓库"><a href="#创建一个新的仓库" class="headerlink" title="创建一个新的仓库"></a>创建一个新的仓库</h2><ol><li><p>登录GitHub账号，没有可以申请一个。点击右上角“+”，选择创建一个仓库<br><img src="https://upload-images.jianshu.io/upload_images/14481291-381b4ac711626171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" new repository"></p></li><li><p>定义Repository name，点击创建<br><img src="https://upload-images.jianshu.io/upload_images/14481291-59cdd735c2ba1880.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="repository"></p></li><li><p>创建完之后的仓库<br><img src="https://upload-images.jianshu.io/upload_images/14481291-bc9da1605978ec7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="first repository"></p></li></ol><h2 id="连接GitHub-1"><a href="#连接GitHub-1" class="headerlink" title="连接GitHub"></a>连接GitHub</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/nullcxy/First-Repository.git</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14481291-ae1b7c36111e93a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git地址"></p><h2 id="将文件推送到远程仓库"><a href="#将文件推送到远程仓库" class="headerlink" title="将文件推送到远程仓库"></a>将文件推送到远程仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>刚开始的时候远程仓库是空的，所以需要加上“-u”这个参数，下次再push就不需要了，如下即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-5496d60448fd506b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="push"><br>推送到远程仓库成功</p><p>看一下远程仓库</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-eb891eb3a8745a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="success"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Windows上安装Maven</title>
      <link href="/2018/09/15/study5/"/>
      <url>/2018/09/15/study5/</url>
      
        <content type="html"><![CDATA[<h1 id="检查JDK-安装"><a href="#检查JDK-安装" class="headerlink" title="检查JDK 安装"></a>检查JDK 安装</h1><p>在安装Maven之前首先要确认JDK是否安装。Maven可以运行在JDK1.4及以上的版本。检查JDK版本的方式：</p><a id="more"></a><p>打开cmd窗口，运行以下命令可以查看Java安装。</p><p><img src="http://upload-images.jianshu.io/upload_images/14481291-15e5b1d22730f2a7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h1><p>Maven官网下载地址：<a href="http://maven.apache.org/download.html" target="_blank" rel="noopener">http://maven.apache.org/download.html</a></p><h1 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h1><p>将下载的zip包解压到指定目录，我的是D:\apache-maven-3.5.2</p><p>接着设置环境变量：</p><ol><li><p>右击“我的电脑”-&gt;“属性”，单机高级系统设置，选择“坏境变量”，在系统变量中新建一个变量M2_HOME，变量值为Maven的安装目录：D:\apache-maven-3.5.2</p></li><li><p>在系统变量中path变量后面添加%M2_HOME%\bin;注意：多个变量之间用英文分号隔开</p></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/14481291-1d3b0835caa3389c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ol start="3"><li>查看Maven安装情况</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/14481291-268e01bfa162c4ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image">     </p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记——Spring MVC接收前端入参数据的方式</title>
      <link href="/2018/08/31/study9/"/>
      <url>/2018/08/31/study9/</url>
      
        <content type="html"><![CDATA[<p>Spring MVC开发中，接收前端参数并解析参数是非常重要的，我总结了如下接收参数的方式：</p><a id="more"></a><h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><p>普通方式接收</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/index&quot;)</span><br><span class="line">public String getUserName(String username) &#123;</span><br><span class="line">    System.out.println(&quot;username is:&quot;+username);</span><br><span class="line">    return &quot;index&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数写在Controller的方法的形参中，适用于get, post方式提交。参数名必须和前台的一致。</p><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>接收HttpServletRequest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/index&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String getUserName(HttpServletRequest request) &#123;</span><br><span class="line">     String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">     return username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过getParameter()获取POST/GET传递的参数值；它用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或url重定向传值时接收数据。getParameter只是应用服务器在分析你送上来的request页面的文本时，取得你设在表单或url重定向时的值。</p><h4 id="方式三："><a href="#方式三：" class="headerlink" title="方式三："></a>方式三：</h4><p>通过@RequestParam注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  @RequestMapping(value=&quot;/index&quot;)</span><br><span class="line">  public String getUserName(@RequestParam(value=&quot;name&quot;,required=false)String username, Model model)&#123;</span><br><span class="line">       System.out.println(username);</span><br><span class="line">       model.addAttribute(&quot;hello&quot;, &quot;这是用action传过来的值：&quot;+ username);</span><br><span class="line">       return &quot;index&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">#### 方式四：</span><br><span class="line">通过bean来接收json</span><br></pre></td></tr></table></figure></p><p>  @RequestMapping(“/index”)<br>  public @ResponseBody User getUserName(@RequestBody User u) {<br>      System.out.pringln(“name: “ + u.getName());</p><pre><code>User user = new User();user.setName(request.getParameter(&quot;name&quot;));return user;</code></pre><p>  }<br><code>`</code></p><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h1>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>打开Navicat for mysql，显示Missing required libmysql_e.dll, 126</title>
      <link href="/2018/08/15/problem2/"/>
      <url>/2018/08/15/problem2/</url>
      
        <content type="html"><![CDATA[<p>打开Navicat for mysql有时候会显示下图情况</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/14481291-93c81bc2348788a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>根据字义：显示libmysql_e.dll这个文件没有找到</p><p>下载：链接:<a href="https://pan.baidu.com/s/1w_Od50wEoIZUM8q2X37MMQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1w_Od50wEoIZUM8q2X37MMQ</a>  密码:vfnj</p><p>将下载的libmysql_e.dll文件复制粘贴到Navicat for MySQL文件夹下</p><p><img src="http://upload-images.jianshu.io/upload_images/14481291-d9d930bb506d7240.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记——设计模式：MVC模式</title>
      <link href="/2018/08/04/study6/"/>
      <url>/2018/08/04/study6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>MVC模式全称 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p><p>MVC模式的这三个部分的职责非常明确，而且相互分离，因此每个部分都可以独立地改变而不影响其他部分，从而大大提高应用的灵活性和重用性。</p><a id="more"></a><h1 id="Model（模型）："><a href="#Model（模型）：" class="headerlink" title="Model（模型）："></a>Model（模型）：</h1><p>指模型表示业务规则。在MVC的三个部件中，模型拥有最多的处理任务。被模型返回的数据是中立的，模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。</p><h1 id="View（视角）："><a href="#View（视角）：" class="headerlink" title="View（视角）："></a>View（视角）：</h1><p>指用户看到并与之交互的界面。比如由html元素组成的网页界面，或者软件的客户端界面。MVC的好处之一在于它能为应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，它只是作为一种输出数据并允许用户操纵的方式。</p><h1 id="Controller（控制器）："><a href="#Controller（控制器）：" class="headerlink" title="Controller（控制器）："></a>Controller（控制器）：</h1><p>指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。</p><p>例子：</p><p>步骤一：创建模型StaffModel.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.model;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author cxy</span><br><span class="line"> * @Description</span><br><span class="line"> * @Date 2018/9/28 下午2:47</span><br><span class="line"> */</span><br><span class="line">public class StaffModel &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>步骤二：创建视图StaffView.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.view;</span><br><span class="line"></span><br><span class="line">import java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author cxy</span><br><span class="line"> * @Description</span><br><span class="line"> * @Date 2018/9/28 下午2:52</span><br><span class="line"> */</span><br><span class="line">public class StaffView &#123;</span><br><span class="line">    public void printStaffInfo(String name,String sex,int age)&#123;</span><br><span class="line">        System.out.println(&quot;Name:&quot;+name);</span><br><span class="line">        System.out.println(&quot;sex:&quot;+sex);</span><br><span class="line">        System.out.println(&quot;age:&quot;+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>步骤三：创建控制器StaffController.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.controller;</span><br><span class="line"></span><br><span class="line">import com.cxy.model.StaffModel;</span><br><span class="line">import com.cxy.view.StaffView;</span><br><span class="line">import jdk.nashorn.internal.objects.annotations.Constructor;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author cxy</span><br><span class="line"> * @Description</span><br><span class="line"> * @Date 2018/9/28 下午2:58</span><br><span class="line"> */</span><br><span class="line">public class StaffController &#123;</span><br><span class="line">    private StaffModel staffModel;</span><br><span class="line">    private StaffView staffView;</span><br><span class="line"></span><br><span class="line">    public StaffController(StaffModel staffModel,StaffView staffView)&#123;</span><br><span class="line">        this.staffModel = staffModel;</span><br><span class="line">        this.staffView = staffView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStaffName() &#123;</span><br><span class="line">        return staffModel.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStaffName(String name) &#123;</span><br><span class="line">        staffModel.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStaffSex() &#123;</span><br><span class="line">        return staffModel.getSex();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void setStaffSex(String sex) &#123;</span><br><span class="line">        staffModel.setSex(sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStaffAge(int age) &#123;</span><br><span class="line">        staffModel.setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getStaffAge() &#123;</span><br><span class="line">        return staffModel.getAge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void printInfo()&#123;</span><br><span class="line">        staffView.printStaffInfo(staffModel.getName(),staffModel.getSex(), 47        staffModel.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>步骤四：创建测试类来演示MVC模式的用法StaffTest.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.test;</span><br><span class="line"></span><br><span class="line">import com.cxy.controller.StaffController;</span><br><span class="line">import com.cxy.model.StaffModel;</span><br><span class="line">import com.cxy.view.StaffView;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author cxy</span><br><span class="line"> * @Description</span><br><span class="line"> * @Date 2018/9/28 下午3:03</span><br><span class="line"> */</span><br><span class="line">public class StaffTest &#123;</span><br><span class="line">    public static void main(String[] argc)&#123;</span><br><span class="line">        //获取角色数据</span><br><span class="line">        StaffModel staffModel = createRole();</span><br><span class="line">        //创建视图，展示角色信息到控制台</span><br><span class="line">        StaffView staffView = new StaffView();</span><br><span class="line"></span><br><span class="line">        StaffController staffController = new StaffController(staffModel,staffView);</span><br><span class="line"></span><br><span class="line">        staffController.printInfo();</span><br><span class="line">        </span><br><span class="line">        //修改角色</span><br><span class="line">        staffController.setStaffName(&quot;lyj&quot;);</span><br><span class="line">        staffController.setStaffSex(&quot;女&quot;);</span><br><span class="line">        staffController.setStaffAge(18);</span><br><span class="line">        staffController.printInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static StaffModel createRole()&#123;</span><br><span class="line">        StaffModel staffModel = new StaffModel();</span><br><span class="line"></span><br><span class="line">        staffModel.setName(&quot;cxy&quot;);</span><br><span class="line">        staffModel.setSex(&quot;男&quot;);</span><br><span class="line">        staffModel.setAge(25);</span><br><span class="line">        return staffModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行结果：</p><p><img src="http://upload-images.jianshu.io/upload_images/14481291-8f9c79e9fe494edd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记——MyBatis入门</title>
      <link href="/2018/07/30/study8/"/>
      <url>/2018/07/30/study8/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p>MyBatis 是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><a id="more"></a><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="首先创建一个java-web项目"><a href="#首先创建一个java-web项目" class="headerlink" title="首先创建一个java web项目"></a>首先创建一个java web项目</h3><p><img src="http://upload-images.jianshu.io/upload_images/14481291-8626d93b97d57c7c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="导入所需要的jar包"><a href="#导入所需要的jar包" class="headerlink" title="导入所需要的jar包"></a>导入所需要的jar包</h3><p>链接：<a href="https://pan.baidu.com/s/1BkC3eNpqpX-ITXaBHbHzFg" target="_blank" rel="noopener">https://pan.baidu.com/s/1BkC3eNpqpX-ITXaBHbHzFg</a> 密码：r3hj</p><p><img src="https://upload-images.jianshu.io/upload_images/14481291-26cd5468245d31b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jar包"></p><h3 id="创建数据库user和表user，使用utf-8编码"><a href="#创建数据库user和表user，使用utf-8编码" class="headerlink" title="创建数据库user和表user，使用utf-8编码"></a>创建数据库user和表user，使用utf-8编码</h3><p><img src="https://upload-images.jianshu.io/upload_images/14481291-a2dd593a9b7788a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表"></p><h3 id="mysql驱动配置文件"><a href="#mysql驱动配置文件" class="headerlink" title="mysql驱动配置文件"></a>mysql驱动配置文件</h3><p><img src="https://upload-images.jianshu.io/upload_images/14481291-c8ed4ab5a890ce73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置文件"></p><p>优点：优化性能 </p><h3 id="创建mybatis配置文件mybatis-cfg-xml"><a href="#创建mybatis配置文件mybatis-cfg-xml" class="headerlink" title="创建mybatis配置文件mybatis.cfg.xml"></a>创建mybatis配置文件mybatis.cfg.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 引入外部配置文件; --&gt;</span><br><span class="line">    &lt;properties resource=&quot;mysql.properties&quot;&gt;&lt;/properties&gt;</span><br><span class="line">       </span><br><span class="line">&lt;!--        &lt;typeAliases&gt; --&gt;</span><br><span class="line">&lt;!--         &lt;typeAlias alias=&quot;UserBean&quot; type=&quot;com.cxy.mybatis.bean.UserBean&quot; /&gt; --&gt;</span><br><span class="line">&lt;!--     &lt;/typeAliases&gt; --&gt;</span><br><span class="line">       </span><br><span class="line">    &lt;!-- 配置mybatis运行环境,可以配置多个，在具体用时再做切换 --&gt;</span><br><span class="line">    &lt;environments default=&quot;test&quot;&gt;</span><br><span class="line">       &lt;environment id=&quot;test&quot;&gt;</span><br><span class="line">           &lt;!-- type=&quot;JDBC&quot; 代表使用JDBC的提交和回滚来管理事务 --&gt;</span><br><span class="line">           &lt;!-- 事务管理类型：JDBC、MANAGED --&gt;</span><br><span class="line">           &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">           </span><br><span class="line">           &lt;!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI --&gt;</span><br><span class="line">           &lt;!-- POOLED 表示支持JDBC数据源连接池 --&gt;</span><br><span class="line">           &lt;!-- UNPOOLED 表示不支持数据源连接池 --&gt;</span><br><span class="line">           &lt;!-- JNDI 表示支持外部数据源连接池 --&gt;</span><br><span class="line">           &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">               &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class="line">               &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class="line">               &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class="line">               &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class="line">           &lt;/dataSource&gt;</span><br><span class="line">       &lt;/environment&gt;</span><br><span class="line">   &lt;/environments&gt; </span><br><span class="line">   </span><br><span class="line">   &lt;mappers&gt;</span><br><span class="line">        &lt;!-- 告知映射文件方式1，一个一个的配置--&gt;</span><br><span class="line">        &lt;mapper resource=&quot;com/cxy/mybatis/mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">        &lt;!-- 告知映射文件方式2，自动扫描包内的Mapper接口与配置文件 --&gt;</span><br><span class="line">&lt;!--         &lt;package name=&quot;com/cxy/bean&quot;/&gt; --&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="创建实体类（UserBean-java）"><a href="#创建实体类（UserBean-java）" class="headerlink" title="创建实体类（UserBean.java）"></a>创建实体类（UserBean.java）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.mybatis.bean;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 用户实体类</span><br><span class="line"> * @author cxy</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class UserBean &#123;</span><br><span class="line">    public UserBean() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    public UserBean(int id, String name, int sex, String website, String phone) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">        this.website = website;</span><br><span class="line">        this.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int sex;</span><br><span class="line">    private String website;</span><br><span class="line">    private String phone;</span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setSex(int sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getWebsite() &#123;</span><br><span class="line">        return website;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setWebsite(String website) &#123;</span><br><span class="line">        this.website = website;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getPhone() &#123;</span><br><span class="line">        return phone;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setPhone(String phone) &#123;</span><br><span class="line">        this.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;UserBean [id=&quot; + id + &quot;, name=&quot; + name + &quot;, sex=&quot; + sex</span><br><span class="line">                + &quot;, website=&quot; + website + &quot;, phone=&quot; + phone + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建接口（UserMapper-java）"><a href="#创建接口（UserMapper-java）" class="headerlink" title="创建接口（UserMapper.java）"></a>创建接口（UserMapper.java）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.mybatis.mapper;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.cxy.mybatis.bean.UserBean;</span><br><span class="line"></span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 新增用戶</span><br><span class="line">     * @param user</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public int insertUser(UserBean user) throws Exception;</span><br><span class="line">    /**</span><br><span class="line">     * 修改用戶</span><br><span class="line">     * @param user</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public int updateUser (UserBean user) throws Exception;</span><br><span class="line">     /**</span><br><span class="line">      * 刪除用戶</span><br><span class="line">      * @param id</span><br><span class="line">      * @return</span><br><span class="line">      * @throws Exception</span><br><span class="line">      */</span><br><span class="line">    public int deleteUser(int id) throws Exception;</span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询用户信息</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public UserBean selectUserById(int id) throws Exception;</span><br><span class="line">     /**</span><br><span class="line">      * 查询所有的用户信息</span><br><span class="line">      * @return</span><br><span class="line">      * @throws Exception</span><br><span class="line">      */</span><br><span class="line">    public List&lt;UserBean&gt; selectAllUser() throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建映射文件（UserMapper-xml）"><a href="#创建映射文件（UserMapper-xml）" class="headerlink" title="创建映射文件（UserMapper.xml）"></a>创建映射文件（UserMapper.xml）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org/DTD Mapper 3.0&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.cxy.mybatis.mapper.UserMapper&quot;&gt;</span><br><span class="line">    &lt;!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。--&gt;</span><br><span class="line">    &lt;!-- parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型--&gt;</span><br><span class="line">    &lt;!-- useGeneratedKeys：(仅 对 insert有 用 )这 会 告 诉 MyBatis使 用 JDBC的getGeneratedKeys方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 --&gt;    </span><br><span class="line">    &lt;!-- keyProperty：(仅对 insert有用 )标记一个属性， MyBatis会通过 getGeneratedKeys或者通过 insert语句的 selectKey子元素设置它的值。默认：不设置。 --&gt;</span><br><span class="line">    &lt;!-- #&#123;&#125;中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id=&quot;insertUser&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;</span><br><span class="line">        insert into user (id,name,sex,website,phone) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;website&#125;,#&#123;sex&#125;,#&#123;phone&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;update id=&quot;updateUser&quot; &gt;</span><br><span class="line">          update user set id=#&#123;id&#125;,name=#&#123;name&#125;,sex=#&#123;sex&#125;,website=#&#123;website&#125;,phone=#&#123;phone&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">         delete from user where id=#&#123;id&#125;  </span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;selectUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.cxy.mybatis.bean.UserBean&quot;&gt;</span><br><span class="line">         select * from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;selectAllUser&quot; resultType=&quot;com.cxy.mybatis.bean.UserBean&quot;&gt;</span><br><span class="line">         select * from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>注：</p><ol><li>配置文件 mybatis.cfg.xml 是 mybatis 用来建立 sessionFactory，里面主要包含了数据库连接相关内容，还有 java 类所对应的别名，比如：<code>&lt;typeAlias alias=&quot;UserBean&quot; type=&quot;com.cxy.mybatis.bean.UserBean&quot;/&gt;</code> 这个别名非常重要，在具体的类的映射中，比如：UserMapper.xml 中 resultType 就是对应这个。要保持一致，这里的 resultType 还有另外单独的定义方式。</li><li>mybatis.cfg.xml 里面 的<code>&lt;mapper resource=&quot;com/cxy/mybatis/mapper/UserMapper.xml&quot;/&gt;</code>是包含要映射的类的 xml 配置文件。</li><li>在UserMapper.xml 文件里面主要是定义各种 SQL 语句，以及这些语句的参数，以及要返回的类型等等。</li></ol><h3 id="创建工具类（DBTools-java）"><a href="#创建工具类（DBTools-java）" class="headerlink" title="创建工具类（DBTools.java）"></a>创建工具类（DBTools.java）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.mybatis.tools;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line">public class DBTools &#123;</span><br><span class="line">    public static SqlSessionFactory sessionFactory;</span><br><span class="line">    </span><br><span class="line">    static&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String resource = &quot;mybatis.cfg.xml&quot;;</span><br><span class="line">            //使用MyBatis提供的Resources类加载mybatis的配置文件</span><br><span class="line">            Reader reader = Resources.getResourceAsReader(resource);</span><br><span class="line">            //构建sqlSession的工厂</span><br><span class="line">            sessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //创建能执行映射文件中sql的sqlSession</span><br><span class="line">    public static SqlSession getSession()&#123;</span><br><span class="line">        return sessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建测试类（UserService-java）"><a href="#创建测试类（UserService-java）" class="headerlink" title="创建测试类（UserService.java）"></a>创建测试类（UserService.java）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">package com.cxy.mybatis.service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line">import com.cxy.mybatis.bean.UserBean;</span><br><span class="line">import com.cxy.mybatis.mapper.UserMapper;</span><br><span class="line">import com.cxy.mybatis.tools.DBTools;</span><br><span class="line"></span><br><span class="line">public class UserService &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        insertUser();</span><br><span class="line">        deleteUser();</span><br><span class="line">        updateUserById();</span><br><span class="line">        selectUserById();</span><br><span class="line">        selectAllUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增用户</span><br><span class="line">     */</span><br><span class="line">    private static void insertUser() &#123;</span><br><span class="line">        SqlSession session = DBTools.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        UserBean user = new UserBean(2, &quot;lisi&quot;, 1 ,&quot;www.lisi.com&quot;,&quot;15950909990&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            mapper.insertUser(user);</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            session.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 删除用户</span><br><span class="line">     */</span><br><span class="line">    private static void deleteUser()&#123;</span><br><span class="line">        SqlSession session = DBTools.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        try &#123;</span><br><span class="line">            mapper.deleteUser(2);</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            session.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 根据id修改用户</span><br><span class="line">     */</span><br><span class="line">    private static void updateUserById()&#123;</span><br><span class="line">        SqlSession session = DBTools.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        UserBean user = new UserBean(1, &quot;zhu&quot;, 1,&quot;www.lisi.com&quot;,&quot;15950909990&quot;);</span><br><span class="line">        try &#123;</span><br><span class="line">            mapper.updateUser(user);</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            session.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 根据id查询用户</span><br><span class="line">     */</span><br><span class="line">    private static void selectUserById()&#123;</span><br><span class="line">        SqlSession session = DBTools.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        try &#123;</span><br><span class="line">            UserBean user = mapper.selectUserById(1);</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            session.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 查询所有的用户</span><br><span class="line">     */</span><br><span class="line">    private static void selectAllUser()&#123;</span><br><span class="line">        SqlSession session = DBTools.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;UserBean&gt; user = mapper.selectAllUser();</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            session.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="MyBatis的优点："><a href="#MyBatis的优点：" class="headerlink" title="MyBatis的优点："></a>MyBatis的优点：</h4><ol><li><p>基于SQL语法，简单易学。</p></li><li><p>sql写在xml里，便于统一管理和优化。</p></li><li><p>降低sql与程序代码的耦合。</p></li><li><p>提供映射标签，支持对象与数据库的orm字段关系映射</p></li><li><p>提供对象关系映射标签，支持对象关系组建维护</p></li><li><p>提供xml标签，支持编写动态sql。</p></li><li><p>能了解底层组装过程。</p></li><li><p>传统的jdbc相比，减少了大量的代码量，是最简单的持久化框架。</p></li><li><p>所有sql语句，全部定义在xml（建议）中。也可以通过注解的方式在接口上实现。这些映射文件称之为mapper.</p></li><li><p>sql代码从程序代码中彻底分离，可重用，增强了项目中的分工，增强了移植性</p></li></ol><h4 id="MyBatis的缺点："><a href="#MyBatis的缺点：" class="headerlink" title="MyBatis的缺点："></a>MyBatis的缺点：</h4><ol><li><p>sql工作量很大，尤其是字段多、关联表多时，更是如此。</p></li><li><p>sql依赖于数据库，导致数据库移植性差。</p></li><li><p>由于xml里标签id必须唯一，导致DAO中方法不支持方法重载。</p></li><li><p>字段映射标签和对象关系映射标签仅仅是对映射关系的描述，具体实现仍然依赖于sql。（比如配置了一对多Collection标签，如果sql里没有join子表或查询子表的话，查询后返回的对象是不具备对象关系的，即Collection的对象为null）</p></li><li><p>DAO层过于简单，对象组装的工作量较大。</p></li><li><p>不支持级联更新、级联删除。</p></li><li><p>编写动态sql时,不方便调试，尤其逻辑复杂时。</p></li><li><p>提供的写动态sql的xml标签功能简单（连struts都比不上），编写动态sql仍然受限，且可读性低。</p></li><li><p>若不查询主键字段，容易造成查询出的对象有“覆盖”现象。</p></li><li><p>参数的数据类型支持不完善。（如参数为Date类型时，容易报没有get、set方法，需在参数上加@param）</p></li><li><p>多参数时，使用不方便，功能不够强大。（目前支持的方法有map、对象、注解@param以及默认采用012索引位的方式）</p></li><li><p>缓存使用不当，容易产生脏数据。</p></li></ol><h4 id="MyBatis的总结："><a href="#MyBatis的总结：" class="headerlink" title="MyBatis的总结："></a>MyBatis的总结：</h4><p>mybatis的优点其实也是mybatis的缺点，正因为mybatis使用简单，数据的可靠性、完整性的瓶颈便更多依赖于程序员对sql的使用水平上了。sql写在xml里，虽然方便了修改、优化和统一浏览，但可读性很低，调试也非常困难，也非常受限，无法像jdbc那样在代码里根据逻辑实现复杂动态sql拼接。mybatis简单看就是提供了字段映射和对象关系映射的jdbc，省去了数据赋值到对象的步骤而已，除此以外并无太多作为，不要把它想象成hibernate那样强大，简单小巧易用上手，方便浏览修改sql就是它最大的优点了。</p><p>mybatis适用于小型且程序员能力较低的项目和人群使用，对于中大型项目来说我并不推荐使用，如果觉得hibernate效率低的话（实际上也是使用不当所致，hibernate是实际上是不适用于拥有高负载的工程项目），还不如直接用spring提供的jdbc简单框架（Template），同样支持对象映射。</p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记——Java技术体系</title>
      <link href="/2018/07/14/study0/"/>
      <url>/2018/07/14/study0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从广义上讲，Clojure，JRuby，Groovy等运行于java虚拟机上的语言及其相关的程序都属于java技术体系的一员。如果仅从传统意义上来看，Sun官方所定义的java技术体系包括以下几个组成部分：</p><a id="more"></a><ul><li>java程序设计语言</li></ul><ul><li>各种硬件平台上的java虚拟机</li></ul><ul><li>Class文件格式</li></ul><ul><li>Java API类库</li></ul><ul><li>来自商业机构和开源社区的第三方Java类库</li></ul><h1 id="按照功能划分"><a href="#按照功能划分" class="headerlink" title="按照功能划分"></a>按照功能划分</h1><p>我们可以把Java程序设计语言、Java虚拟机、Java API类库这三个部分统称为JDK（Java Development Kit），JDK是用于支持Java程序开发的最小环境。另外，可以把Java SE API子集和Java虚拟机这两部分统称为JRE（Java Runtime Environment），JRE是支持Java程序运行的标准环境，下图展示了Java技术体系所包含的内容，以及JDK和JRE所涵盖的范围。</p><p><img src="http://upload-images.jianshu.io/upload_images/14481291-5c3ea3b78a827b52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="按照业务领域划分"><a href="#按照业务领域划分" class="headerlink" title="按照业务领域划分"></a>按照业务领域划分</h1><p>以上是根据各个组成部分的功能来进行划分的，如果按照技术所服务的领域来划分，或者说按照Java技术关注的重点业务领域来划分，Java技术体系可以分为4个平台，分别为：</p><p>　　1. Java Card：支持一些Java小程序（Applets)运行在小内存设备（如智能卡）上的平台</p><p>　　2. Java ME（Micro Edition）：支持Java程序运行在移动终端（手机，PDA）上的平台，对Java API有所精简，并加入了针对移动终端的支持，这个版本以前称为J2ME</p><p>　　3. Java SE（Standard Edition）：支持面向桌面级应用（如Windows下的应用程序）的Java平台，提供了完整的Java核心API，这个版本以前称为J2SE</p><p>　　4. Java EE（Enterprise Edition）：支持使用多层架构的企业应用（如ERP、CRM应用）的Java平台，除了提供Java SE API外，还对其做了大量的扩充并提供了相关的部署支持，在各个版本以前称为J2EE</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么Java中1000==1000为false而100==100为true</title>
      <link href="/2018/07/02/problem1/"/>
      <url>/2018/07/02/problem1/</url>
      
        <content type="html"><![CDATA[<p>我们首先看下面一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer a = 1000,b=1000;</span><br><span class="line">System.out.println(a==b);</span><br><span class="line">Integer c = 100,d = 100;</span><br><span class="line">System.out.println(c==d);</span><br></pre></td></tr></table></figure><a id="more"></a><p>运行结果如下</p><p><img src="http://upload-images.jianshu.io/upload_images/14481291-108844abf4e09bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>按照我们的理解，如果两个引用指向同一个对象，用==表示它们是相等的。如果两个引用指向不同的对象，==代表不相等的，即使它们的内容相同。</p><p>因此，后面一条语句应该也是false。</p><p>分析：</p><p>我们看下Integer.java类，我们会发现有一个内部私有类，IntegerCache.java，它缓存了从-128~127之间的所有的整数对象。</p><p>所以我们在声明类似——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100;</span><br></pre></td></tr></table></figure><p>的时候，它实际上在内部做的是——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(100);</span><br></pre></td></tr></table></figure><p>我们看下valueOf()方法，可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* Returns an &#123;@code Integer&#125; instance representing the specified </span><br><span class="line">* &#123;@code int&#125; value.  If a new &#123;@code Integer&#125; instance is not </span><br><span class="line">* required, this method should generally be used in preference to</span><br><span class="line">* the constructor &#123;@link #Integer(int)&#125;, as this method is likely </span><br><span class="line">* to yield significantly better space and time performance by</span><br><span class="line">* caching frequently requested values.</span><br><span class="line">*</span><br><span class="line">  * This method will always cache values in the range -128 to 127, </span><br><span class="line">  * inclusive, and may cache other values outside of this range. </span><br><span class="line">  * </span><br><span class="line">  * @param i an &#123;@code int&#125; value. </span><br><span class="line">  * @return an &#123;@code Integer&#125; instance representing &#123;@code i&#125;. </span><br><span class="line">  * @since 1.5 </span><br><span class="line"> */</span><br><span class="line">  public static Integer valueOf(int i) &#123; </span><br><span class="line">      if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) </span><br><span class="line">          return IntegerCache.cache[i + (-IntegerCache.low)]; </span><br><span class="line">      return new Integer(i); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果值的范围在-128~127之间，它就从高速缓存返回实例。</p><p>所以——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer c = 100,d = 100;</span><br></pre></td></tr></table></figure><p>指向同一个对象，所以输出才会是true。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习笔记——浏览器对象模型（Window）</title>
      <link href="/2018/06/25/study1/"/>
      <url>/2018/06/25/study1/</url>
      
        <content type="html"><![CDATA[<h2 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h2><p>所有浏览器都支持 window 对象。它表示浏览器窗口。</p><a id="more"></a><p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p><p>全局变量是 window 对象的属性。</p><p>全局函数是 window 对象的方法。</p><p>甚至 HTML DOM 的 document 也是 window 对象的属性之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.document.getElementById(&quot;header&quot;);</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;header&quot;);</span><br></pre></td></tr></table></figure><h2 id="Window-尺寸"><a href="#Window-尺寸" class="headerlink" title="Window 尺寸"></a>Window 尺寸</h2><p>有三种方法能够确定浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。</p><p>对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</p><ul><li>window.innerHeight - 浏览器窗口的内部高度</li><li>window.innerWidth - 浏览器窗口的内部宽度</li></ul><p>对于 Internet Explorer 8、7、6、5：</p><ul><li>document.documentElement.clientHeight</li><li>document.documentElement.clientWidth</li></ul><p>或者</p><ul><li>document.body.clientHeight</li><li>document.body.clientWidth</li></ul><p>实用的 JavaScript 方案（涵盖所有浏览器）：</p><ol><li>实例：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> var w=window.innerWidth</span><br><span class="line"> || document.documentElement.clientWidth 10 || document.body.clientWidth; 11 </span><br><span class="line"> var h=window.innerHeight 13 || document.documentElement.clientHeight 14 || document.body.clientHeight; 15 </span><br><span class="line"> x=document.getElementById(&quot;demo&quot;); 17 x.innerHTML=&quot;浏览器的内部窗口宽度：&quot; + w + &quot;，高度：&quot; + h + &quot;。&quot;</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>结果：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器的内部窗口宽度：705，高度：400。</span><br></pre></td></tr></table></figure><h2 id="其他-Window-方法"><a href="#其他-Window-方法" class="headerlink" title="其他 Window 方法"></a>其他 Window 方法</h2><p>一些其他方法：</p><ul><li>window.open() - 打开新窗口</li><li>window.close() - 关闭当前窗口</li><li>window.moveTo() - 移动当前窗口</li><li>window.resizeTo() - 调整当前窗口的尺寸</li></ul><ol><li>jQuery.isWindow()方法：判断传入的参数是否为 window对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;    </span><br><span class="line">&lt;script src=&quot;../jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">window 是一个窗口吗? &lt;b&gt;&lt;/b&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function () &#123; 13     $(&quot;b&quot;).append( &quot;&quot; + $.isWindow(window) ); 14 &#125;) 15 &lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>结果：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window 是一个窗口吗? true</span><br></pre></td></tr></table></figure><ol start="3"><li>语法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.isWindow( object )</span><br></pre></td></tr></table></figure><p><em>object：任意类型，需要进行判断的任意值。</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git安装</title>
      <link href="/2018/06/21/study11/"/>
      <url>/2018/06/21/study11/</url>
      
        <content type="html"><![CDATA[<h1 id="下载-Git工具"><a href="#下载-Git工具" class="headerlink" title="下载 Git工具"></a>下载 <a href="https://git-scm.com/downloads" title="Git" target="_blank" rel="noopener">Git工具</a></h1><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/14481291-f7c07ac15f83cb73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git"><br>选择对应的版本下载</p><h1 id="安装的过程中，可以选择桌面快捷方式"><a href="#安装的过程中，可以选择桌面快捷方式" class="headerlink" title="安装的过程中，可以选择桌面快捷方式"></a>安装的过程中，可以选择桌面快捷方式</h1><p><img src="https://upload-images.jianshu.io/upload_images/14481291-20c990508f643338.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Desktop"></p><h1 id="安装后的文件夹"><a href="#安装后的文件夹" class="headerlink" title="安装后的文件夹"></a>安装后的文件夹</h1><p><img src="https://upload-images.jianshu.io/upload_images/14481291-70cbb58c377c1477.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件夹"></p><h1 id="打开git-bash-exe"><a href="#打开git-bash-exe" class="headerlink" title="打开git-bash.exe"></a>打开git-bash.exe</h1><p><img src="https://upload-images.jianshu.io/upload_images/14481291-1c2f67699a2c47cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git-bash.exe"></p><h1 id="绑定用户"><a href="#绑定用户" class="headerlink" title="绑定用户"></a>绑定用户</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;youremail@xxx.com&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MarkDown</title>
      <link href="/2018/03/01/study2/"/>
      <url>/2018/03/01/study2/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown支持两种标题的语法，类Setext和类atx形式。</p><a id="more"></a><ol><li>类Setext：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是 H1</span><br><span class="line">=============</span><br></pre></td></tr></table></figure><blockquote><h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是 H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><blockquote><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><ol start="2"><li>类atx：</li></ol></blockquote><p>首行加入一个#对应H1，六个#对应H6，一共6个阶级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这是H1</span><br><span class="line">###### 这是H6</span><br></pre></td></tr></table></figure></p><blockquote><h1 id="这是H1"><a href="#这是H1" class="headerlink" title="这是H1"></a>这是H1</h1><h6 id="这是H6"><a href="#这是H6" class="headerlink" title="这是H6"></a>这是H6</h6></blockquote><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt; 1.   这是第一行列表项。</span><br></pre></td></tr></table></figure><blockquote><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><blockquote><p>This is nested blockquote.</p><ol><li>这是第一行列表项。</li></ol></blockquote></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>无序列表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   第一行</span><br><span class="line">*   第二行</span><br><span class="line">*   第三行</span><br></pre></td></tr></table></figure><blockquote><ul><li>第一行</li><li>第二行</li><li>第三行</li></ul></blockquote><p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ 第一行</span><br><span class="line">+ 第二行</span><br><span class="line">+ 第三行</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>第一行</li><li>第二行</li><li>第三行</li></ul></blockquote><p>也等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 第一行</span><br><span class="line">- 第二行</span><br><span class="line">- 第三行</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>第一行</li><li>第二行</li><li>第三行</li></ul></blockquote><ol start="2"><li>有序列表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一行</span><br><span class="line">2. 第二行</span><br><span class="line">3. 第三行</span><br></pre></td></tr></table></figure><blockquote><ol><li>第一行</li><li>第二行</li><li>第三行</li></ol></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>缩进4个空格或是1个制表符就可以建立代码区块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  code area</span><br><span class="line">code area</span><br></pre></td></tr></table></figure></p><blockquote><pre><code>code areacode area</code></pre></blockquote><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号，减号，底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><blockquote><hr><hr><hr><hr><hr></blockquote><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure><blockquote><p>这是 <a href="http://www.baidu.com/" title="百度" target="_blank" rel="noopener">链接</a> .</p></blockquote><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*强调*</span><br><span class="line">_强调_</span><br><span class="line">**强调**</span><br><span class="line">__强调__</span><br></pre></td></tr></table></figure><blockquote><p><em>强调</em><br>_强调_<br><strong>强调</strong><br><strong>强调</strong></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>标记一小段行内代码，你可以用反引号把它包起来（`）</p><p>使用 <code>printf()</code> 方法.</p><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：<br><code>There is a literal backtick (`) here.</code></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片](http://upload-images.jianshu.io/upload_images/14481291-93c81bc2348788a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;Optional title&quot;)</span><br></pre></td></tr></table></figure><blockquote><p><img src="http://upload-images.jianshu.io/upload_images/14481291-93c81bc2348788a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片" title="异常"></p></blockquote><h2 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h2><p>Markdown支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure></p><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>Markdown支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来，Markdown就会自动把它转成链接。一般网址的链接文字就和链接地址一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.example.com/&gt;</span><br></pre></td></tr></table></figure></p><p><a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;address@example.com&gt;</span><br></pre></td></tr></table></figure><p>我的邮箱：<a href="mailto:&#49;&#x32;&#56;&#55;&#53;&#x33;&#x30;&#57;&#x39;&#53;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;" target="_blank" rel="noopener">&#49;&#x32;&#56;&#55;&#53;&#x33;&#x30;&#57;&#x39;&#53;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a>，有问题欢迎询问。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello hexo</title>
      <link href="/2017/09/03/hello-world/"/>
      <url>/2017/09/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
