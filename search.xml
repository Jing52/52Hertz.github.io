<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[String，StringBuilder，StringBuffer的区别]]></title>
    <url>%2F2018%2F10%2F31%2Fstudy10%2F</url>
    <content type="text"><![CDATA[可变性首先我们看下String的源码 12/** The value is used for character storage. */ private final char value[]; 由此可以看出，String类中使用final关键字字符数组来保存字符串，所以是不可变的。 注：在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量） 1、当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。 2、final修饰的方法不能被重写。 3、当final修饰一个基本数据类型时，表示该基本数据类型的值一旦在初始化后便不能发生变化；如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化的。 再来看下StringBuilder，StringBuffer的源码 123456public final class StringBuilder extends AbstractStringBuilder implements java.io.Serializable, CharSequence &#123; ... &#125; 123456public final class StringBuffer extends AbstractStringBuilder implements java.io.Serializable, CharSequence &#123; ... &#125; 由源码可以看出，StringBuilder、StringBuffer都继承自AbstractStringBuilder类，我们接下来再看下AbstractStringBuilder类的源码 1234/** * The value is used for character storage. */ char[] value; 由源码可以看出，StringBuilder、StringBuffer在AbstractStringBuilder中也是使用字符数组保存字符串的，但是这两种都是可变的。 线程安全性String中的对象是不可变的，也可以理解为常量，线程安全的。 接下来我们继续看下StringBuffer源码，我在这随机截取了源码中的一些方法 12345678910111213141516171819202122232425262728/** * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125; * @since 1.2 */ @Override public synchronized String substring(int start, int end) &#123; return super.substring(start, end); &#125; /** * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125; */ @Override public synchronized StringBuffer insert(int offset, Object obj) &#123; toStringCache = null; super.insert(offset, String.valueOf(obj)); return this; &#125; /** * @since 1.4 */ @Override public int indexOf(String str) &#123; // Note, synchronization achieved via invocations of other StringBuffer methods return super.indexOf(str); &#125; 由源代码可以看出StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。 再来看下StringBuilder源码中的一些方法 12345678910111213141516171819202122@Overridepublic StringBuilder append(Object obj) &#123; return append(String.valueOf(obj)); &#125; /** * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125; */@Override public StringBuilder insert(int index, char[] str, int offset, int len) &#123; super.insert(index, str, offset, len); return this; &#125; /** * @throws StringIndexOutOfBoundsException &#123;@inheritDoc&#125; */ @Override public StringBuilder replace(int start, int end, String str) &#123; super.replace(start, end, str); return this; &#125; 由源码可以看出，StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。 性能每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。 StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。 相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。 1、操作少量的数据 ： String 2、单线程操作字符串缓冲区下操作大量数据 ： StringBuilder 3、多线程操作字符串缓冲区下操作大量数据 ： StringBuffer]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习笔记-EDAS介绍]]></title>
    <url>%2F2018%2F10%2F27%2Fstudy7%2F</url>
    <content type="text"><![CDATA[HSF：HSF为EDAS应用开发提供了一套分布式服务框架的解决方案，从应用层面提供统一的服务发布/调用支持，让开发者很容易的开发分布式的应用，不用考虑分布领域中的各种技术细节（远程通讯、性能消耗、调用的透明化、同步/异步调用方式的实现等等问题） 容器： Ali-tomcat: 与Apache Tomcat完全兼容的WebApp容器 引入Pandora容器的类隔离机制解决EDAS依赖包与应用包冲突的问题 Pandora: 能够隔离EADS与应用之间的jar包依赖，保证两者互不受影响 配置中心： Address-Server：地址中心，寻址Config-Server和Diamond-Server Diamond-Server：动态配置变更推送 优势特性： 高效性 基于推拉结合的方式，实现配置动态变更实时推送 可靠性 通过客户端、服务端多级容灾，实现系统的高可用 易扩展 配置数据在集群单节点上全量分布，实现节点无状态 Config-Server: 用于HSF服务数据的发布订阅 优势特性： 1、无Master ConfigServer基于无Master架构不存在单点问题 2、自动聚合 ConfigServer支持数据的自动聚合 3、实时 服务端在订阅关系变化时，会主动推送配置数据到客户端]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>EDAS</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Method breakpoints may dramatically slow down debugging情况解决]]></title>
    <url>%2F2018%2F10%2F10%2Fproblem0%2F</url>
    <content type="text"><![CDATA[首先给大家看张图 这是我最近degubber启动项目时遇到的问题。 原因：根据语义，断点打在了方法上面。 引起的问题：导致项目启动变慢，IDEA调试会越来越慢。 解决方法：Ctrl+shift+F8打开Breakpoints面板，如图 由此，我们可以清晰看到有一个断点在方法上，我们只要将方法前面的勾去掉就行了]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MYSQL limit,offset 区别]]></title>
    <url>%2F2018%2F10%2F04%2Fstudy4%2F</url>
    <content type="text"><![CDATA[首先看下表 执行下面SQL123456SELECT *FROM `user`WHERE sex = 1 结果再来看下下面的SQL12345678SELECT *FROM `user`WHERE sex = 1LIMIT 2, 2 结果由此可以看出，limit后面是从第2条开始读，读取2条信息。最后看下下面的SQL12345678SELECT *FROM `user`WHERE sex = 1LIMIT 2 OFFSET 1 结果由此可知，limit后面跟的是2条数据，offset后面是从第1条开始读取]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[freemarker判断对象是否为空]]></title>
    <url>%2F2018%2F10%2F01%2Fproblem3%2F</url>
    <content type="text"><![CDATA[一、freemarker中显示某对象使用${object} 例： &lt;input class=&quot;easyui-textbox&quot; id=&quot;&quot; value=&quot;${TOPIC_NAME}&quot;&gt; 二、如果对象出现null值，freemarker就会报错，可以通过判断来对象是否为空 1234567891 &lt;#if object??&gt;2 3 ......4 5 &lt;#else&gt;6 7 ......8 9 &lt;/#if&gt; 也可以通过设置默认值${object!””}，如果object为null，页面就会显示”“ &lt;input class=&quot;easyui-textbox&quot; id=&quot;&quot; value=${TOPIC_NAME!&quot;如果TOPIC_NAME为null，显示&quot;}&gt; 三、如果对象导航为null，可以通过${(map.name)!”如果map为null或者name为null，显示”} 12&lt;#--加上括号，感叹号解决对象导航为空的问题--&gt;&lt;input class=&quot;easyui-textbox&quot; id=&quot;&quot; value=$&#123;(map.name)!&quot;map为null或者name为null&quot;&#125;&gt; 四、总结 ！可以解决null ！可以解决未定义的问题 ！和（）可以解决对象导航的问题]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>freemarker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA搭建和部署Maven项目]]></title>
    <url>%2F2018%2F09%2F28%2Fstudy3%2F</url>
    <content type="text"><![CDATA[创建Maven项目 File-&gt;New-&gt;Project 点击Maven项目，并选择archetype-webapp，然后next 输入 groupId 和 ArtifactId ，一个是组，一个是项目名称 ，version默认就行，然后next 选择maven的根目录、settings.xml文件和本地仓库的位置，根据个人路径配置。添加一个archetypeCatalog=internal的属性。这个参数的意义是让这个maven项目的骨架不要到远程下载而是本地获取。如果你没加这个参数，那么项目创建可能在卡在downloading maven plugins…点击Next 项目名，finish 查看项目的结构PS:新创建的Maven项目是没有resources文件夹的，可以通过以下方式添加 File-&gt;Project Structure 打开Project Structure，选择Modules 选择New Folder 输入folder name 选择Resources文件资源类型,然后apply Terminal终端输入mvn clean install，编译打包成功，显示BUILD SUCCESS字样 打包后根目录下出现target目录 部署到Tomcat 选择local 修改Name，可以不修改，选择Tomcat、jdk，以及端口。将打包好的war包部署到Tomcat，点击apply Run运行，浏览器跳出页面，输出Hello World，项目发布成功]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上传文件至GitHub]]></title>
    <url>%2F2018%2F09%2F22%2Fstudy12%2F</url>
    <content type="text"><![CDATA[Git安装可查看我之前写过的博文 设置SSH key查看ssh key可以先查看一下是否已经生成过ssh key我这边显示已经生成过了，如果没有显示这三个文件，说明没有生成 生成ssh key1$ ssh-keygen -t rsa -C &quot;youremail@xxx.com&quot; 生成过程中点击Enter键三次，此时在默认路径会生成.ssh文件夹，里面有如图三个文件 查看id_rsa.pub 为GitHub账号配置ssh keySettings点击头像，下拉框中有个Settings设置选项 Personal settings在Personal settings选择 SSH and GPG keys New SSH key点击New SSH key SSH keys/Add new Add后 创建本地仓库创建123mkdir testcd f:test 初始化本地仓库1git init 初始化后会出现.git文件夹，如图如果没有，是被隐藏了，工具-&gt;文件夹选项-&gt;查看，选择“显示隐藏的文件、文件夹和驱动器” 添加将所有文件添加到仓库1git add . 提交提交，双引号内是提交注释1git commit -m &apos;first&apos; 显示已经提交一个文件 连接GitHub创建一个新的仓库 登录GitHub账号，没有可以申请一个。点击右上角“+”，选择创建一个仓库 定义Repository name，点击创建 创建完之后的仓库 连接GitHub1git remote add origin https://github.com/nullcxy/First-Repository.git 将文件推送到远程仓库1$ git push -u origin master 刚开始的时候远程仓库是空的，所以需要加上“-u”这个参数，下次再push就不需要了，如下即可1$ git push origin master 推送到远程仓库成功看一下远程仓库]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Windows上安装Maven]]></title>
    <url>%2F2018%2F09%2F15%2Fstudy5%2F</url>
    <content type="text"><![CDATA[一、检查JDK 安装 在安装Maven之前首先要确认JDK是否安装。Maven可以运行在JDK1.4及以上的版本。检查JDK版本的方式： 打开cmd窗口，运行以下命令可以查看Java安装。 二、下载MavenMaven官网下载地址：http://maven.apache.org/download.html 三、本地安装将下载的zip包解压到指定目录，我的是D:\apache-maven-3.5.2 接着设置环境变量： 1、右击“我的电脑”-&gt;“属性”，单机高级系统设置，选择“坏境变量”，在系统变量中新建一个变量M2_HOME，变量值为Maven的安装目录：D:\apache-maven-3.5.2 2、在系统变量中path变量后面添加%M2_HOME%\bin;注意：多个变量之间用英文分号隔开 3、查看Maven安装情况]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习笔记——Spring MVC接收前端入参数据的方式]]></title>
    <url>%2F2018%2F08%2F31%2Fstudy9%2F</url>
    <content type="text"><![CDATA[Spring MVC开发中，接收前端参数并解析参数是非常重要的，我总结了如下接收参数的方式： 方式一：普通方式接收 12345@RequestMapping(&quot;/index&quot;)public String getUserName(String username) &#123; System.out.println(&quot;username is:&quot;+username); return &quot;index&quot;;&#125; 参数写在Controller的方法的形参中，适用于get, post方式提交。参数名必须和前台的一致。 方式二：接收HttpServletRequest123456@RequestMapping(&quot;/index&quot;)@ResponseBodypublic String getUserName(HttpServletRequest request) &#123; String username = request.getParameter(&quot;username&quot;); return username;&#125; 可以通过getParameter()获取POST/GET传递的参数值；它用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或url重定向传值时接收数据。getParameter只是应用服务器在分析你送上来的request页面的文本时，取得你设在表单或url重定向时的值。 方式三：通过@RequestParam注解12345678910 @RequestMapping(value=&quot;/index&quot;) public String getUserName(@RequestParam(value=&quot;name&quot;,required=false)String username, Model model)&#123; System.out.println(username); model.addAttribute(&quot;hello&quot;, &quot;这是用action传过来的值：&quot;+ username); return &quot;index&quot;; &#125;``` #### 方式四：通过bean来接收json @RequestMapping(“/index”) public @ResponseBody User getUserName(@RequestBody User u) { System.out.pringln(“name: “ + u.getName()); User user = new User(); user.setName(request.getParameter(&quot;name&quot;)); return user; }` 未完待续……]]></content>
      <categories>
        <category>开源框架</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打开Navicat for mysql，显示Missing required libmysql_e.dll, 126]]></title>
    <url>%2F2018%2F08%2F15%2Fproblem2%2F</url>
    <content type="text"><![CDATA[打开Navicat for mysql有时候会显示下图情况 根据字义：显示libmysql_e.dll这个文件没有找到 下载：链接:https://pan.baidu.com/s/1w_Od50wEoIZUM8q2X37MMQ 密码:vfnj 将下载的libmysql_e.dll文件复制粘贴到Navicat for MySQL文件夹下]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习笔记——设计模式：MVC模式]]></title>
    <url>%2F2018%2F08%2F04%2Fstudy6%2F</url>
    <content type="text"><![CDATA[MVC模式全称 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。 MVC模式的这三个部分的职责非常明确，而且相互分离，因此每个部分都可以独立地改变而不影响其他部分，从而大大提高应用的灵活性和重用性。 Model（模型）：指模型表示业务规则。在MVC的三个部件中，模型拥有最多的处理任务。被模型返回的数据是中立的，模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。 View（视角）：指用户看到并与之交互的界面。比如由html元素组成的网页界面，或者软件的客户端界面。MVC的好处之一在于它能为应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，它只是作为一种输出数据并允许用户操纵的方式。 Controller（控制器）：指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。 例子： 步骤一：创建模型StaffModel.java123456789101112131415161718192021222324252627282930313233343536package com.cxy.model;/** * @author cxy * @Description * @Date 2018/9/28 下午2:47 */public class StaffModel &#123; private String name; private String sex; private int age; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125;&#125; 步骤二：创建视图StaffView.java12345678910111213141516package com.cxy.view;import java.util.logging.Logger;/** * @author cxy * @Description * @Date 2018/9/28 下午2:52 */public class StaffView &#123; public void printStaffInfo(String name,String sex,int age)&#123; System.out.println(&quot;Name:&quot;+name); System.out.println(&quot;sex:&quot;+sex); System.out.println(&quot;age:&quot;+age); &#125;&#125; 步骤三：创建控制器StaffController.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.cxy.controller;import com.cxy.model.StaffModel;import com.cxy.view.StaffView;import jdk.nashorn.internal.objects.annotations.Constructor;/** * @author cxy * @Description * @Date 2018/9/28 下午2:58 */public class StaffController &#123; private StaffModel staffModel; private StaffView staffView; public StaffController(StaffModel staffModel,StaffView staffView)&#123; this.staffModel = staffModel; this.staffView = staffView; &#125; public String getStaffName() &#123; return staffModel.getName(); &#125; public void setStaffName(String name) &#123; staffModel.setName(name); &#125; public String getStaffSex() &#123; return staffModel.getSex(); &#125; public void setStaffSex(String sex) &#123; staffModel.setSex(sex); &#125; public void setStaffAge(int age) &#123; staffModel.setAge(age); &#125; public int getStaffAge() &#123; return staffModel.getAge(); &#125; public void printInfo()&#123; staffView.printStaffInfo(staffModel.getName(),staffModel.getSex(), 47 staffModel.getAge()); &#125;&#125; 步骤四：创建测试类来演示MVC模式的用法StaffTest.java1234567891011121314151617181920212223242526272829303132333435363738package com.cxy.test;import com.cxy.controller.StaffController;import com.cxy.model.StaffModel;import com.cxy.view.StaffView;/** * @author cxy * @Description * @Date 2018/9/28 下午3:03 */public class StaffTest &#123; public static void main(String[] argc)&#123; //获取角色数据 StaffModel staffModel = createRole(); //创建视图，展示角色信息到控制台 StaffView staffView = new StaffView(); StaffController staffController = new StaffController(staffModel,staffView); staffController.printInfo(); //修改角色 staffController.setStaffName(&quot;lyj&quot;); staffController.setStaffSex(&quot;女&quot;); staffController.setStaffAge(18); staffController.printInfo(); &#125; public static StaffModel createRole()&#123; StaffModel staffModel = new StaffModel(); staffModel.setName(&quot;cxy&quot;); staffModel.setSex(&quot;男&quot;); staffModel.setAge(25); return staffModel; &#125;&#125; 执行结果：]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习笔记——MyBatis入门]]></title>
    <url>%2F2018%2F07%2F30%2Fstudy8%2F</url>
    <content type="text"><![CDATA[MyBatis简介MyBatis 是支持定制化SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。 例子1)首先创建一个java web项目 2）导入所需要的jar包链接：https://pan.baidu.com/s/1BkC3eNpqpX-ITXaBHbHzFg 密码：r3hj 3）创建数据库user和表user，使用utf-8编码4）mysql驱动配置文件优点：优化性能 5）创建mybatis配置文件mybatis.cfg.xml12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;!-- 引入外部配置文件; --&gt; &lt;properties resource=&quot;mysql.properties&quot;&gt;&lt;/properties&gt; &lt;!-- &lt;typeAliases&gt; --&gt;&lt;!-- &lt;typeAlias alias=&quot;UserBean&quot; type=&quot;com.cxy.mybatis.bean.UserBean&quot; /&gt; --&gt;&lt;!-- &lt;/typeAliases&gt; --&gt; &lt;!-- 配置mybatis运行环境,可以配置多个，在具体用时再做切换 --&gt; &lt;environments default=&quot;test&quot;&gt; &lt;environment id=&quot;test&quot;&gt; &lt;!-- type=&quot;JDBC&quot; 代表使用JDBC的提交和回滚来管理事务 --&gt; &lt;!-- 事务管理类型：JDBC、MANAGED --&gt; &lt;transactionManager type=&quot;JDBC&quot; /&gt; &lt;!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI --&gt; &lt;!-- POOLED 表示支持JDBC数据源连接池 --&gt; &lt;!-- UNPOOLED 表示不支持数据源连接池 --&gt; &lt;!-- JNDI 表示支持外部数据源连接池 --&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;!-- 告知映射文件方式1，一个一个的配置--&gt; &lt;mapper resource=&quot;com/cxy/mybatis/mapper/UserMapper.xml&quot;/&gt; &lt;!-- 告知映射文件方式2，自动扫描包内的Mapper接口与配置文件 --&gt;&lt;!-- &lt;package name=&quot;com/cxy/bean&quot;/&gt; --&gt; &lt;/mappers&gt;&lt;/configuration&gt; 6）创建实体类（UserBean.java）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package com.cxy.mybatis.bean;/** * 用户实体类 * @author cxy * */public class UserBean &#123; public UserBean() &#123; super(); &#125; public UserBean(int id, String name, int sex, String website, String phone) &#123; super(); this.id = id; this.name = name; this.sex = sex; this.website = website; this.phone = phone; &#125; private int id; private String name; private int sex; private String website; private String phone; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getSex() &#123; return sex; &#125; public void setSex(int sex) &#123; this.sex = sex; &#125; public String getWebsite() &#123; return website; &#125; public void setWebsite(String website) &#123; this.website = website; &#125; public String getPhone() &#123; return phone; &#125; public void setPhone(String phone) &#123; this.phone = phone; &#125; @Override public String toString() &#123; return &quot;UserBean [id=&quot; + id + &quot;, name=&quot; + name + &quot;, sex=&quot; + sex + &quot;, website=&quot; + website + &quot;, phone=&quot; + phone + &quot;]&quot;; &#125; &#125; 7)创建接口（UserMapper.java）12345678910111213141516171819202122232425262728293031323334353637383940414243package com.cxy.mybatis.mapper;import java.util.List;import com.cxy.mybatis.bean.UserBean;public interface UserMapper &#123; /** * 新增用戶 * @param user * @return * @throws Exception */ public int insertUser(UserBean user) throws Exception; /** * 修改用戶 * @param user * @param id * @return * @throws Exception */ public int updateUser (UserBean user) throws Exception; /** * 刪除用戶 * @param id * @return * @throws Exception */ public int deleteUser(int id) throws Exception; /** * 根据id查询用户信息 * @param id * @return * @throws Exception */ public UserBean selectUserById(int id) throws Exception; /** * 查询所有的用户信息 * @return * @throws Exception */ public List&lt;UserBean&gt; selectAllUser() throws Exception;&#125; 8)创建映射文件（UserMapper.xml）1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org/DTD Mapper 3.0&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.cxy.mybatis.mapper.UserMapper&quot;&gt; &lt;!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。--&gt; &lt;!-- parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型--&gt; &lt;!-- useGeneratedKeys：(仅 对 insert有 用 )这 会 告 诉 MyBatis使 用 JDBC的getGeneratedKeys方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 --&gt; &lt;!-- keyProperty：(仅对 insert有用 )标记一个属性， MyBatis会通过 getGeneratedKeys或者通过 insert语句的 selectKey子元素设置它的值。默认：不设置。 --&gt; &lt;!-- #&#123;&#125;中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值 --&gt; &lt;insert id=&quot;insertUser&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into user (id,name,sex,website,phone) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;website&#125;,#&#123;sex&#125;,#&#123;phone&#125;) &lt;/insert&gt; &lt;update id=&quot;updateUser&quot; &gt; update user set id=#&#123;id&#125;,name=#&#123;name&#125;,sex=#&#123;sex&#125;,website=#&#123;website&#125;,phone=#&#123;phone&#125; where id=#&#123;id&#125; &lt;/update&gt; &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt; delete from user where id=#&#123;id&#125; &lt;/delete&gt; &lt;select id=&quot;selectUserById&quot; parameterType=&quot;int&quot; resultType=&quot;com.cxy.mybatis.bean.UserBean&quot;&gt; select * from user where id=#&#123;id&#125; &lt;/select&gt; &lt;select id=&quot;selectAllUser&quot; resultType=&quot;com.cxy.mybatis.bean.UserBean&quot;&gt; select * from user &lt;/select&gt;&lt;/mapper&gt; 注： 1、配置文件 mybatis.cfg.xml 是 mybatis 用来建立 sessionFactory，里面主要包含了数据库连接相关内容，还有 java 类所对应的别名，比如：&lt;typeAlias alias=&quot;UserBean&quot; type=&quot;com.cxy.mybatis.bean.UserBean&quot;/&gt; 这个别名非常重要，在具体的类的映射中，比如：UserMapper.xml 中 resultType 就是对应这个。要保持一致，这里的 resultType 还有另外单独的定义方式。2、mybatis.cfg.xml 里面 的&lt;mapper resource=&quot;com/cxy/mybatis/mapper/UserMapper.xml&quot;/&gt;是包含要映射的类的 xml 配置文件。3、在UserMapper.xml 文件里面主要是定义各种 SQL 语句，以及这些语句的参数，以及要返回的类型等等。 9)创建工具类（DBTools.java）123456789101112131415161718192021222324252627282930package com.cxy.mybatis.tools;import java.io.Reader;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;public class DBTools &#123; public static SqlSessionFactory sessionFactory; static&#123; try &#123; String resource = &quot;mybatis.cfg.xml&quot;; //使用MyBatis提供的Resources类加载mybatis的配置文件 Reader reader = Resources.getResourceAsReader(resource); //构建sqlSession的工厂 sessionFactory = new SqlSessionFactoryBuilder().build(reader); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; //创建能执行映射文件中sql的sqlSession public static SqlSession getSession()&#123; return sessionFactory.openSession(); &#125; &#125; 10)创建测试类（UserService.java）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100package com.cxy.mybatis.service;import java.util.List;import org.apache.ibatis.session.SqlSession;import com.cxy.mybatis.bean.UserBean;import com.cxy.mybatis.mapper.UserMapper;import com.cxy.mybatis.tools.DBTools;public class UserService &#123; public static void main(String[] args) &#123; insertUser(); deleteUser(); updateUserById(); selectUserById(); selectAllUser(); &#125; /** * 新增用户 */ private static void insertUser() &#123; SqlSession session = DBTools.getSession(); UserMapper mapper = session.getMapper(UserMapper.class); UserBean user = new UserBean(2, &quot;lisi&quot;, 1 ,&quot;www.lisi.com&quot;,&quot;15950909990&quot;); try &#123; mapper.insertUser(user); System.out.println(user.toString()); session.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); session.rollback(); &#125; &#125; /** * 删除用户 */ private static void deleteUser()&#123; SqlSession session = DBTools.getSession(); UserMapper mapper = session.getMapper(UserMapper.class); try &#123; mapper.deleteUser(2); session.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); session.rollback(); &#125; &#125; /** * 根据id修改用户 */ private static void updateUserById()&#123; SqlSession session = DBTools.getSession(); UserMapper mapper = session.getMapper(UserMapper.class); UserBean user = new UserBean(1, &quot;zhu&quot;, 1,&quot;www.lisi.com&quot;,&quot;15950909990&quot;); try &#123; mapper.updateUser(user); System.out.println(user.toString()); session.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); session.rollback(); &#125; &#125; /** * 根据id查询用户 */ private static void selectUserById()&#123; SqlSession session = DBTools.getSession(); UserMapper mapper = session.getMapper(UserMapper.class); try &#123; UserBean user = mapper.selectUserById(1); System.out.println(user.toString()); session.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); session.rollback(); &#125; &#125; /** * 查询所有的用户 */ private static void selectAllUser()&#123; SqlSession session = DBTools.getSession(); UserMapper mapper = session.getMapper(UserMapper.class); try &#123; List&lt;UserBean&gt; user = mapper.selectAllUser(); System.out.println(user.toString()); session.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); session.rollback(); &#125; &#125;&#125; 总结MyBatis的优点： 基于SQL语法，简单易学。 sql写在xml里，便于统一管理和优化。 降低sql与程序代码的耦合。 提供映射标签，支持对象与数据库的orm字段关系映射 提供对象关系映射标签，支持对象关系组建维护 提供xml标签，支持编写动态sql。 能了解底层组装过程。 传统的jdbc相比，减少了大量的代码量，是最简单的持久化框架。 所有sql语句，全部定义在xml（建议）中。也可以通过注解的方式在接口上实现。这些映射文件称之为mapper. sql代码从程序代码中彻底分离，可重用，增强了项目中的分工，增强了移植性 MyBatis的缺点： sql工作量很大，尤其是字段多、关联表多时，更是如此。 sql依赖于数据库，导致数据库移植性差。 由于xml里标签id必须唯一，导致DAO中方法不支持方法重载。 字段映射标签和对象关系映射标签仅仅是对映射关系的描述，具体实现仍然依赖于sql。（比如配置了一对多Collection标签，如果sql里没有join子表或查询子表的话，查询后返回的对象是不具备对象关系的，即Collection的对象为null） DAO层过于简单，对象组装的工作量较大。 不支持级联更新、级联删除。 编写动态sql时,不方便调试，尤其逻辑复杂时。 提供的写动态sql的xml标签功能简单（连struts都比不上），编写动态sql仍然受限，且可读性低。 若不查询主键字段，容易造成查询出的对象有“覆盖”现象。 参数的数据类型支持不完善。（如参数为Date类型时，容易报没有get、set方法，需在参数上加@param） 多参数时，使用不方便，功能不够强大。（目前支持的方法有map、对象、注解@param以及默认采用012索引位的方式） 缓存使用不当，容易产生脏数据。 总结： mybatis的优点其实也是mybatis的缺点，正因为mybatis使用简单，数据的可靠性、完整性的瓶颈便更多依赖于程序员对sql的使用水平上了。sql写在xml里，虽然方便了修改、优化和统一浏览，但可读性很低，调试也非常困难，也非常受限，无法像jdbc那样在代码里根据逻辑实现复杂动态sql拼接。mybatis简单看就是提供了字段映射和对象关系映射的jdbc，省去了数据赋值到对象的步骤而已，除此以外并无太多作为，不要把它想象成hibernate那样强大，简单小巧易用上手，方便浏览修改sql就是它最大的优点了。 mybatis适用于小型且程序员能力较低的项目和人群使用，对于中大型项目来说我并不推荐使用，如果觉得hibernate效率低的话（实际上也是使用不当所致，hibernate是实际上是不适用于拥有高负载的工程项目），还不如直接用spring提供的jdbc简单框架（Template），同样支持对象映射。]]></content>
      <categories>
        <category>开源框架</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习笔记——Java技术体系]]></title>
    <url>%2F2018%2F07%2F14%2Fstudy0%2F</url>
    <content type="text"><![CDATA[从广义上讲，Clojure，JRuby，Groovy等运行于java虚拟机上的语言及其相关的程序都属于java技术体系的一员。如果仅从传统意义上来看，Sun官方所定义的java技术体系包括以下几个组成部分： ·java程序设计语言 ·各种硬件平台上的java虚拟机 ·Class文件格式 ·Java API类库 ·来自商业机构和开源社区的第三方Java类库 我们可以把Java程序设计语言、Java虚拟机、Java API类库这三个部分统称为JDK（Java Development Kit），JDK是用于支持Java程序开发的最小环境。另外，可以把Java SE API子集和Java虚拟机这两部分统称为JRE（Java Runtime Environment），JRE是支持Java程序运行的标准环境，下图展示了Java技术体系所包含的内容，以及JDK和JRE所涵盖的范围。 以上是根据各个组成部分的功能来进行划分的，如果按照技术所服务的领域来划分，或者说按照Java技术关注的重点业务领域来划分，Java技术体系可以分为4个平台，分别为： 1、Java Card：支持一些Java小程序（Applets)运行在小内存设备（如智能卡）上的平台 2、Java ME（Micro Edition）：支持Java程序运行在移动终端（手机，PDA）上的平台，对Java API有所精简，并加入了针对移动终端的支持，这个版本以前称为J2ME 3、Java SE（Standard Edition）：支持面向桌面级应用（如Windows下的应用程序）的Java平台，提供了完整的Java核心API，这个版本以前称为J2SE 4、Java EE（Enterprise Edition）：支持使用多层架构的企业应用（如ERP、CRM应用）的Java平台，除了提供Java SE API外，还对其做了大量的扩充并提供了相关的部署支持，在各个版本以前称为J2EE]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么Java中1000==1000为false而100==100为true]]></title>
    <url>%2F2018%2F07%2F02%2Fproblem1%2F</url>
    <content type="text"><![CDATA[我们首先看下面一段代码 1234Integer a = 1000,b=1000;System.out.println(a==b);Integer c = 100,d = 100;System.out.println(c==d); 运行结果如下 按照我们的理解，如果两个引用指向同一个对象，用==表示它们是相等的。如果两个引用指向不同的对象，==代表不相等的，即使它们的内容相同。 因此，后面一条语句应该也是false。 分析：我们看下Integer.java类，我们会发现有一个内部私有类，IntegerCache.java，它缓存了从-128~127之间的所有的整数对象。 所以我们在声明类似—— 1Integer c = 100; 的时候，它实际上在内部做的是—— 1Integer i = Integer.valueOf(100); 我们看下valueOf()方法，可以看到 1234567891011121314151617181920/** * Returns an &#123;@code Integer&#125; instance representing the specified * &#123;@code int&#125; value. If a new &#123;@code Integer&#125; instance is not * required, this method should generally be used in preference to * the constructor &#123;@link #Integer(int)&#125;, as this method is likely * to yield significantly better space and time performance by * caching frequently requested values. * * This method will always cache values in the range -128 to 127, * inclusive, and may cache other values outside of this range. * * @param i an &#123;@code int&#125; value. * @return an &#123;@code Integer&#125; instance representing &#123;@code i&#125;. * @since 1.5 */ public static Integer valueOf(int i) &#123; if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); &#125; 如果值的范围在-128~127之间，它就从高速缓存返回实例。 所以—— 1Integer c = 100,d = 100; 指向同一个对象，所以输出才会是true。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习笔记——浏览器对象模型（Window）]]></title>
    <url>%2F2018%2F06%2F25%2Fstudy1%2F</url>
    <content type="text"><![CDATA[Window 对象所有浏览器都支持 window 对象。它表示浏览器窗口。 所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。 全局变量是 window 对象的属性。 全局函数是 window 对象的方法。 甚至 HTML DOM 的 document 也是 window 对象的属性之一： 1window.document.getElementById(&quot;header&quot;); 等同于 1document.getElementById(&quot;header&quot;); Window 尺寸有三种方法能够确定浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。 对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari： window.innerHeight - 浏览器窗口的内部高度 window.innerWidth - 浏览器窗口的内部宽度 对于 Internet Explorer 8、7、6、5： document.documentElement.clientHeight document.documentElement.clientWidth 或者 document.body.clientHeight document.body.clientWidth 实用的 JavaScript 方案（涵盖所有浏览器）： 实例：123456789101112131415&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;p id=&quot;demo&quot;&gt;&lt;/p&gt; &lt;script&gt; var w=window.innerWidth || document.documentElement.clientWidth 10 || document.body.clientWidth; 11 var h=window.innerHeight 13 || document.documentElement.clientHeight 14 || document.body.clientHeight; 15 x=document.getElementById(&quot;demo&quot;); 17 x.innerHTML=&quot;浏览器的内部窗口宽度：&quot; + w + &quot;，高度：&quot; + h + &quot;。&quot; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 结果：1浏览器的内部窗口宽度：705，高度：400。 其他 Window 方法一些其他方法： window.open() - 打开新窗口 window.close() - 关闭当前窗口 window.moveTo() - 移动当前窗口 window.resizeTo() - 调整当前窗口的尺寸 jQuery.isWindow()方法：判断传入的参数是否为 window对象123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; &lt;script src=&quot;../jquery/1.10.2/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;window 是一个窗口吗? &lt;b&gt;&lt;/b&gt;&lt;script&gt;$(function () &#123; 13 $(&quot;b&quot;).append( &quot;&quot; + $.isWindow(window) ); 14 &#125;) 15 &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 结果：1window 是一个窗口吗? true 语法：1$.isWindow( object ) object：任意类型，需要进行判断的任意值。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git安装]]></title>
    <url>%2F2018%2F06%2F21%2Fstudy11%2F</url>
    <content type="text"><![CDATA[下载 Git工具 选择对应的版本下载 安装的过程中，可以选择桌面快捷方式 安装后的文件夹 打开git-bash.exe 绑定用户12$ git config --global user.name &quot;yourname&quot;$ git config --global user.email &quot;youremail@xxx.com&quot;]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown]]></title>
    <url>%2F2018%2F03%2F01%2Fstudy2%2F</url>
    <content type="text"><![CDATA[标题Markdown支持两种标题的语法，类Setext和类atx形式。 类Setext：12这是 H1============= 这是 H1 12这是 H2------------- 这是 H2 类atx：首行加入一个#对应H1，六个#对应H6，一共6个阶级12# 这是H1###### 这是H6 这是H1这是H6 区块引用123&gt; ## 这是一个标题。&gt; &gt; This is nested blockquote.&gt; 1. 这是第一行列表项。 这是一个标题。 This is nested blockquote. 这是第一行列表项。 列表无序列表：123* 第一行* 第二行* 第三行 第一行 第二行 第三行 等同于123+ 第一行+ 第二行+ 第三行 第一行 第二行 第三行 也等同于123- 第一行- 第二行- 第三行 第一行 第二行 第三行 有序列表1231. 第一行2. 第二行3. 第三行 第一行 第二行 第三行 代码块缩进4个空格或是1个制表符就可以建立代码区块12 code areacode area code area code area 分隔线你可以在一行中用三个以上的星号，减号，底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：123456789* * *********- - ---------------------------------------- 链接123This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 这是 链接 . 强调1234*强调*_强调_**强调**__强调__ 强调_强调_强调强调 代码标记一小段行内代码，你可以用反引号把它包起来（`） 使用 printf() 方法. 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：There is a literal backtick (`) here. 图片1![图片](http://upload-images.jianshu.io/upload_images/14481291-93c81bc2348788a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;Optional title&quot;) 反斜杠Markdown支持以下这些符号前面加上反斜杠来帮助插入普通的符号：123456789101112\ 反斜线` 反引号* 星号_ 底线&#123;&#125; 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号 自动链接Markdown支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来，Markdown就会自动把它转成链接。一般网址的链接文字就和链接地址一样1&lt;http://www.example.com/&gt; http://www.baidu.com/ 1&lt;address@example.com&gt; 我的邮箱：&#x31;&#x32;&#56;&#55;&#53;&#x33;&#48;&#x39;&#x39;&#x35;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;，有问题欢迎询问。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello hexo]]></title>
    <url>%2F2017%2F09%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
